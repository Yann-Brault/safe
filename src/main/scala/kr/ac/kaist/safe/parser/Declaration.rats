/**
 * *****************************************************************************
 * Copyright (c) 2016, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * A.5 Functions and Programs
 * Definition of JavaScript functions and programs
 */
module kr.ac.kaist.safe.parser.Declaration(Statement, Symbol, Identifier, Keyword, Spacing);

import Statement;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * Program ::= w SourceElements? w EndOfFile
 */
public Program File =
     initParser a1:UseStrictDirectives? w a2:TopLevelSourceElements? closeParser
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null) a2 = Collections.<SourceElement>emptyList();
       HashMap<String, Span> map = new HashMap<String, Span>();
       if (a1 == null)
           yyValue = NodeFactory.makeProgram(span, a2, false);
       else
           yyValue = NodeFactory.makeProgram(span, a2, true);
     };
void initParser = w { initParser(); };
void closeParser = w EndOfFile
     { try {
           // revert to the original value for NodeUtil.keepComments
           NodeUtil.setKeepComments(keepComments);
           writer.close();
           fw.close();
       } catch (IOException error) {
           error("Closing a log file for the parser failed!");
       }
     };

private String UseStrictDirectives =
     yyValue:UseStrictDirective UseStrictDirective+
     { Span span = createSpan(yyStart,yyCount);
       System.out.println(span+":");
       System.out.println("    Warning: you may not use multiple Use Strict Directives.");
     }
   / yyValue:UseStrictDirective
   ;

private String UseStrictDirective =
     ["] yyValue:"use strict" ["] (w semicolon / w comma)?
   / ['] yyValue:"use strict" ['] (w semicolon / w comma)?
   ;

/*
 * SourceElements ::= SourceElement (w SourceElement)*
 */
private List<SourceElement> TopLevelSourceElements =
     a1:SourceElement a2s:(w SourceElement)*
     { // Disable recording comments for now for the end of file
       NodeUtil.setKeepComments(false);
       yyValue = JUseful.cons(a1, a2s.list());
     };

/*
 * SourceElements ::= SourceElement (w SourceElement)*
 */
private List<SourceElement> SourceElements =
     a1:SourceElement a2s:(w SourceElement)*
     { yyValue = JUseful.cons(a1, a2s.list()); };

/*
 * SourceElement ::=
 *   FunctionDeclaration
 * | Statement
 */
private SourceElement SourceElement =
     FunctionDeclaration
   / Statement ;

/*
 * FunctionDeclaration ::= function w Id w ( (w Params)? w ) w FunctionBody
 */
FunDecl FunctionDeclaration =
     function w a1:Id w openparen a2:(w Params)? w closeparen w a3:FunctionBody
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null) a2 = Collections.<Id>emptyList();
       yyValue = NodeFactory.makeFunDecl(span, a1, a2, a3.first(), a3.second(), a3.third());
     };

/*
 * Params ::= Id (w , w Id)*
 */
public List<Id> Params =
     a1:Id a2s:(w void:comma w Id)+
     { yyValue = JUseful.cons(a1, a2s.list()); }
   / a1:Id
     { yyValue = JUseful.list(a1); };

/*
 * FunctionBody ::= { w SourceElement* w }
 */
public Triple<List<SourceElement>, String, Boolean> FunctionBody =
     opencurly w a1:UseStrictDirectives? w closecurly
     { if (a1 == null)
         yyValue = new Triple<List<SourceElement>, String, Boolean>(
                       Collections.<SourceElement>emptyList(),
                       "{}",
                       Boolean.valueOf(false));
       else
         yyValue = new Triple<List<SourceElement>, String, Boolean>(
                       Collections.<SourceElement>emptyList(),
                       "{ 'use strict'; }",
                       Boolean.valueOf(true));
     }
   / opencurly w a1:UseStrictDirectives? w a2:SourceElements w closecurly
     { String str = JSAstToConcrete.prBody(a2);
       if (a1 == null)
         yyValue = new Triple<List<SourceElement>, String, Boolean>(a2, "{ " + str + " }", Boolean.valueOf(false));
       else
         yyValue = new Triple<List<SourceElement>, String, Boolean>(a2, "{ 'use strict'; " + str + " }", Boolean.valueOf(true));
     };

/*
 * FunctionExpr ::= function (w Id)? w ( (w Params)? w ) w FunctionBody
 */
public LHS FunctionExpr =
     function a1:(w Id)? w openparen a2:(w Params)? w closeparen w a3:FunctionBody
     { Span span = createSpan(yyStart,yyCount+1);
       Id f = (a1 == null) ? NodeFactory.makeId(span, "", "") : a1;
       if (a2 == null) a2 = Collections.<Id>emptyList();
       yyValue = NodeFactory.makeFunExpr(span, f, a2, a3.first(), a3.second(), a3.third());
     };
