Heap: {
  #Object: {
    "prototype": <#Object.prototype, F, F, F> 
  },
  #Object.prototype: {
    "toString": <#Object.prototype.toString, T, F, T>,
    "toLocaleString": <#Object.prototype.toLocaleString, T, F, T>,
    "valueOf": <#Object.prototype.valueOf, T, F, T>,
    "hasOwnProperty": <#Object.prototype.hasOwnProperty, T, F, T>,
    "isPrototypeOf": <#Object.prototype.isPrototypeOf, T, F, T>,
    "propertyIsEnumerable": <#Object.prototype.propertyIsEnumerable, T, F, T>
  },
  #Function: {
    "prototype": <#Function.prototype, F, F, F> 
  },
  #Function.prototype: {
    "toString": <#Function.prototype.toString, T, F, T>,
    "apply": <#Function.prototype.apply, T, F, T>,
    "call": <#Function.prototype.call, T, F, T>,
    "bind": <#Function.prototype.bind, T, F, T>
  },
  #Array: {
    "prototype": <#Array.prototype, F, F, F> 
  },
  #Array.prototype: {
    "toString": <#Array.prototype.toString, T, F, T>,
    "toLocaleString": <#Array.prototype.toLocaleString, T, F, T>,
    "concat": <#Array.prototype.concat, T, F, T>,
    "join": <#Array.prototype.join, T, F, T>,
    "pop": <#Array.prototype.pop, T, F, T>,
    "push": <#Array.prototype.push, T, F, T>,
    "reverse": <#Array.prototype.reverse, T, F, T>,
    "shift": <#Array.prototype.shift, T, F, T>,
    "unshift": <#Array.prototype.unshift, T, F, T>,
    "slice": <#Array.prototype.slice, T, F, T>,
    "sort": <#Array.prototype.sort, T, F, T>,
    "splice": <#Array.prototype.splice, T, F, T>,
    "indexOf": <#Array.prototype.indexOf, T, F, T>,
    "forEach": <#Array.prototype.forEach, T, F, T>,
    "map": <#Array.prototype.map, T, F, T>,
    "item": <#Array.prototype.item, T, F, T>,
    "every": <#Array.prototype.every, T, F, T>,
    "some": <#Array.prototype.some, T, F, T>,
    "reduce": <#Array.prototype.reduce, T, F, T>,
    "reduceRight": <#Array.prototype.reduceRight, T, F, T>,
    "filter": <#Array.prototype.filter, T, F, T>
  },
  #String: {
    "prototype": <#String.prototype, F, F, F> 
  },
  #String.prototype: {
    "toString": <#String.prototype.toString, T, F, T>,
    "valueOf": <#String.prototype.valueOf, T, F, T>,
    "charAt": <#String.prototype.charAt, T, F, T>,
    "charCodeAt": <#String.prototype.charCodeAt, T, F, T>,
    "concat": <#String.prototype.concat, T, F, T>,
    "toUpperCase": <#String.prototype.toUpperCase, T, F, T>,
    "toLocaleUpperCase": <#String.prototype.toLocaleUpperCase, T, F, T>,
    "toLowerCase": <#String.prototype.toLowerCase, T, F, T>,
    "toLocaleLowerCase": <#String.prototype.toLocaleLowerCase, T, F, T>,
    "indexOf": <#String.prototype.indexOf, T, F, T>,
    "split": <#String.prototype.split, T, F, T>,
    "substring": <#String.prototype.substring, T, F, T>,
    "slice": <#String.prototype.slice, T, F, T>,
    "substr": <#String.prototype.substr, T, F, T>,
    "replace": <#String.prototype.replace, T, F, T>,
    "match": <#String.prototype.match, T, F, T>,
    "trim": <#String.prototype.trim, T, F, T>,
    "loadFile": <#String.prototype.loadFile, T, F, T>,
    "link": <#String.prototype.link, T, F, T>,
    "anchor": <#String.prototype.anchor, T, F, T>
  },
  #Number: {
    "prototype": <#Number.prototype, F, F, F> 
  },
  #Number.prototype: {
    "toString": <#Number.prototype.toString, T, F, T>
  },
  #RegExp: {
    "prototype": <#RegExp.prototype, F, F, F> 
  },
  #RegExp.prototype: {
    "exec": <#RegExp.prototype.exec, T, F, T>,
    "test": <#RegExp.prototype.test, T, F, T>
  },
  #Date: {
    "prototype": <#Date.prototype, F, F, F> 
  },
  #Date.prototype: {
    "getTime": <#Date.prototype.getTime, T, F, T>,
    "getDate": <#Date.prototype.getDate, T, F, T>,
    "setDate": <#Date.prototype.setDate, T, F, T>,
    "getDay": <#Date.prototype.getDay, T, F, T>,
    "setDay": <#Date.prototype.setDay, T, F, T>,
    "getMonth": <#Date.prototype.getMonth, T, F, T>,
    "setMonth": <#Date.prototype.setMonth, T, F, T>,
    "getHours": <#Date.prototype.getHours, T, F, T>,
    "setHours": <#Date.prototype.setHours, T, F, T>,
    "getMinutes": <#Date.prototype.getMinutes, T, F, T>,
    "setMinutes": <#Date.prototype.setMinutes, T, F, T>,
    "getSeconds": <#Date.prototype.getSeconds, T, F, T>,
    "setSeconds": <#Date.prototype.setSeconds, T, F, T>,
    "getMilliseconds": <#Date.prototype.getMilliseconds, T, F, T>,
    "setMilliseconds": <#Date.prototype.setMilliseconds, T, F, T>,
    "getFullYear": <#Date.prototype.getFullYear, T, F, T>
  },
  #Date.prototype.getFullYear: { 
    [[Call]]: fun(70)
  },
  #Date.prototype.setMilliseconds: { 
    [[Call]]: fun(69)
  },
  #Date.prototype.getMilliseconds: { 
    [[Call]]: fun(68)
  },
  #Date.prototype.setSeconds: { 
    [[Call]]: fun(67)
  },
  #Date.prototype.getSeconds: { 
    [[Call]]: fun(66)
  },
  #Date.prototype.setMinutes: { 
    [[Call]]: fun(65)
  },
  #Date.prototype.getMinutes: { 
    [[Call]]: fun(64)
  },
  #Date.prototype.setHours: { 
    [[Call]]: fun(63)
  },
  #Date.prototype.getHours: { 
    [[Call]]: fun(62)
  },
  #Date.prototype.setMonth: { 
    [[Call]]: fun(61)
  },
  #Date.prototype.getMonth: { 
    [[Call]]: fun(60)
  },
  #Date.prototype.setDay: { 
    [[Call]]: fun(59)
  },
  #Date.prototype.getDay: { 
    [[Call]]: fun(58)
  },
  #Date.prototype.setDate: { 
    [[Call]]: fun(57)
  },
  #Date.prototype.getDate: { 
    [[Call]]: fun(56)
  },
  #Date.prototype.getTime: { 
    [[Call]]: fun(55)
  },
  #RegExp.prototype.test: { 
    [[Call]]: fun(54)
  },
  #RegExp.prototype.exec: { 
    [[Call]]: fun(53)
  },
  #Number.prototype.toString: { 
    [[Call]]: fun(52)
  },
  #String.prototype.anchor: { 
    [[Call]]: fun(51)
  },
  #String.prototype.link: { 
    [[Call]]: fun(50)
  },
  #String.prototype.loadFile: { 
    [[Call]]: fun(49)
  },
  #String.prototype.trim: { 
    [[Call]]: fun(48)
  },
  #String.prototype.match: { 
    [[Call]]: fun(47)
  },
  #String.prototype.replace: { 
    [[Call]]: fun(46)
  },
  #String.prototype.substr: { 
    [[Call]]: fun(45)
  },
  #String.prototype.slice: { 
    [[Call]]: fun(44)
  },
  #String.prototype.substring: { 
    [[Call]]: fun(43)
  },
  #String.prototype.split: { 
    [[Call]]: fun(42)
  },
  #String.prototype.indexOf: { 
    [[Call]]: fun(41)
  },
  #String.prototype.toLocaleLowerCase: { 
    [[Call]]: fun(40)
  },
  #String.prototype.toLowerCase: { 
    [[Call]]: fun(39)
  },
  #String.prototype.toLocaleUpperCase: { 
    [[Call]]: fun(38)
  },
  #String.prototype.toUpperCase: { 
    [[Call]]: fun(37)
  },
  #String.prototype.concat: { 
    [[Call]]: fun(36)
  },
  #String.prototype.charCodeAt: { 
    [[Call]]: fun(35)
  },
  #String.prototype.charAt: { 
    [[Call]]: fun(34)
  },
  #String.prototype.valueOf: { 
    [[Call]]: fun(33)
  },
  #String.prototype.toString: { 
    [[Call]]: fun(32)
  },
  #Array.prototype.filter: { 
    [[Call]]: fun(31)
  },
  #Array.prototype.reduceRight: { 
    [[Call]]: fun(30)
  },
  #Array.prototype.reduce: { 
    [[Call]]: fun(29)
  },
  #Array.prototype.some: { 
    [[Call]]: fun(28)
  },
  #Array.prototype.every: { 
    [[Call]]: fun(27)
  },
  #Array.prototype.item: { 
    [[Call]]: fun(26)
  },
  #Array.prototype.map: { 
    [[Call]]: fun(25)
  },
  #Array.prototype.forEach: { 
    [[Call]]: fun(24)
  },
  #Array.prototype.indexOf: { 
    [[Call]]: fun(23)
  },
  #Array.prototype.splice: { 
    [[Call]]: fun(22)
  },
  #Array.prototype.sort: { 
    [[Call]]: fun(21)
  },
  #Array.prototype.slice: { 
    [[Call]]: fun(20)
  },
  #Array.prototype.unshift: { 
    [[Call]]: fun(19)
  },
  #Array.prototype.shift: { 
    [[Call]]: fun(18)
  },
  #Array.prototype.reverse: { 
    [[Call]]: fun(17)
  },
  #Array.prototype.push: { 
    [[Call]]: fun(16)
  },
  #Array.prototype.pop: { 
    [[Call]]: fun(15)
  },
  #Array.prototype.join: { 
    [[Call]]: fun(14)
  },
  #Array.prototype.concat: { 
    [[Call]]: fun(13)
  },
  #Array.prototype.toLocaleString: { 
    [[Call]]: fun(12)
  },
  #Array.prototype.toString: { 
    [[Call]]: fun(11)
  },
  #Function.prototype.bind: { 
    [[Call]]: fun(10)
  },
  #Function.prototype.call: { 
    [[Call]]: fun(9)
  },
  #Function.prototype.apply: { 
    [[Call]]: fun(8)
  },
  #Function.prototype.toString: { 
    [[Call]]: fun(7)
  },
  #Object.prototype.propertyIsEnumerable: { 
    [[Call]]: fun(6)
  },
  #Object.prototype.isPrototypeOf: { 
    [[Call]]: fun(5)
  },
  #Object.prototype.hasOwnProperty: { 
    [[Call]]: fun(4)
  },
  #Object.prototype.valueOf: { 
    [[Call]]: fun(3)
  },
  #Object.prototype.toLocaleString: { 
    [[Call]]: fun(2)
  },
  #Object.prototype.toString: { 
    [[Call]]: fun(1)
  },
  #Global: {
    "Object": <#Object, T, F, T>,
    "Function": <#Function, T, F, T>,
    "Array": <#Array, T, F, T>,
    "String": <#String, T, F, T>,
    "Number": <#Number, T, F, T>,
    "RegExp": <#RegExp, T, F, T>,
    "Date": <#Date, T, F, T>
  }
}

Function: {
  1: [\\
  function Object_prototype_toString () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  2: [\\
  function Object_prototype_toLocaleString () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  3: [\\
  function valueOf () {
    return this;
  }
  \\],
  4: [\\
  function Object_prototype_hasOwnProperty (V) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  5: [\\
  function Object_prototype_isPrototypeOf (V) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  6: [\\
  function Object_prototype_propertyIsEnumerable (V) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  7: [\\
  function Function_prototype_toString () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  8: [\\
  function Function_prototype_apply (thisArg, argArray) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  9: [\\
  function Function_prototype_call (thisArg) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  10: [\\
  function Function_prototype_bind (thisArg) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  11: [\\
  function Array_prototype_toString () {
    return this.join(",");
  }
  \\],
  12: [\\
  function Array_prototype_toLocaleString () {
    var result = "";
    var limit = this.length;
    for(var k = 0; k < limit; k++) {
      result = result.concat( this[k].toLocaleString() );
      result = result.concat( "," );
    }

    return result;
  }
  \\],
  13: [\\
  function Array_prototype_concat () {
    var result = new Array();
    var n = 0;
    
    for(var i = 0; i < this.length; i++)
      result[n++] = this[i];

    for(i = 0; i < arguments.length; i++)
      for(var j = 0; j < arguments[i].length; j++)
        result[n++] = arguments[i][j];

    result.length = n;

    return result;
  }
  \\],
  14: [\\
  function Array_prototype_join (separator) {
    var result = "";
    var limit = this.length;
    for(var k = 0; k < limit; k++) {
      result = result.concat( this[k].toString() );
      result = result.concat( separator );
    }

    return result;
  }
  \\],
  15: [\\
  function Array_prototype_pop () {
	  var n0 = this.length;
	  if (n0) {
		  var n1 = this[n0-1];
		  this.length = n0-1;
		  // needed for non-arrays
		  delete this[n0-1];
		  return n1;
	  } else {
		  // needed for non-arrays
		  this.length = 0;
	  }
  }
  \\],
  16: [\\
  function Array_prototype_push () {
    var n = this.length;
    
    // nasty hack for field-sensitive builders
    // TODO: fix this somehow
    if (n == 0) {
      this[0] = arguments[0]; 
    }

    for(var i = 0; i < arguments.length; i++) {
      this[ n++ ] = arguments[i];
    }

    this.length = n;
    return n;
  }
  \\],
  17: [\\
  function Array_prototype_reverse () {
    var n = this.length;
    for (var k = 0; k < (n/2); k++) {
      var tmp = this[k];
      this[k] = this[n-k];
      this[n-k] = tmp;
    }

    return this;
  }
  \\],
  18: [\\
  function Array_prototype_shift () {
    var result = this[ 0 ];
    for(var i = 0; i < this.length-1; i++)
      this[i] = this[i+1];

    this.length--;

    return result;
  }
  \\],
  19: [\\
  function Array_prototype_unshift () {
	  var n = arguments.length;
	  for(var i=this.length+n-1;i>=n;--i)
		  this[i] = this[i-n];
	  for(;i>=0;--i)
		  this[i] = arguments[i];
	  this.length += n;
	  return this.length;
  }
  \\],
  20: [\\
  function Array_prototype_slice (start, end) {
    var j = 0;
    if (start < 0) start = this.length + start;
    if (end < 0) end = this.length + end;
    var result = new Array();
    for(var i = start; i < end; i++)
      result[j++] = this[i];

    result.length = j;

    return result;
  }
  \\],
  21: [\\
  function Array_prototype_sort (fn) {
    for(var l = 0; i < this.length; l++) {
      var mindex = l;
      for(var i = l; i < this.length; i++) {
        if (fn(this[mindex], this[i]) < 0) {
          mindex = i;
        }
      }

      if (mindex != l) {
        var tmp = this[l];
        this[l] = this[mindex];
        this[mindex] = this[l];
      }
    }
  }
  \\],
  22: [\\
  function Array_prototype_splice (start, delete_count) {
	  var old_len = arguments.length,
	      new_count = arguments.length - 2;
          new_len = old_len - deleteCount + new_count;
          
	  var deleted = this.slice(start, start + delete_count),
	  	  remainder = this.slice(start + delete_count, old_len);

	  for(var i=start;i<start+new_count;++i)
		  this[i] = arguments[2+start-i];
	  
	  for(var k=0;k<remainder.length;++k,++i)
		  this[i] = remainder[k];
	  
	  for(;i<old_len;++i)
		  delete this[i];
	  
	  this.length = new_len;
	  
	  return deleted;
  }
  \\],
  23: [\\
  function Array_prototype_indexOf (elt, start) {
	  if(arguments.length < 2)
		  start = 0;
	  if(start < 0) start += this.length;
	  if(start < 0) start = 0;
	  for(var i=start;i<this.length;++i)
		  if(this[i] === elt)
			  return i;
	  return -1;
  }
  \\],
  24: [\\
  function Array_prototype_forEach (callback, thisArg) {
	  for(var i=0;i<this.length;++i)
		  callback.call(thisArg, this[i], i, this);
  }
  \\],
  25: [\\
  function Array_prototype_map (callback, thisArg) {
	  var res = [];
	  for(var i=0;i<this.length;++i)
		  res[i] = callback.call(thisArg, this[i], i, this);
	  res.length = this.length;
	  return res;
  }
  \\],
  26: [\\
  function Array_prototype_item (index) {
	  return this[index];
  }
  \\],
  27: [\\
  function Array_prototype_every (arg1, arg2) {
	  var n0 = this.length;
	  var n3 = true;
	  for (var i = 0; i < n0; i += 1) {
	    var n1 = i in this;
	    if (n1) {
	      var n2 = this[i];
	      n3 = arg1.call(arg2, n2, i, this);
	      if (!n3) {
	        break;
	      }
	    }
	  }
	  return n3;
  }
  \\],
  28: [\\
  function Array_prototype_some (arg1, arg2) {
	  var n0 = this.length;
	  var n3 = false;
	  for (var i = 0; i < n0; i += 1) {
	    var n1 = i in this;
	    if (n1) {
	      var n2 = this[i];
	      n3 = arg1.call(arg2, n2, i, this);
	      if (n3) {
	        break;
	      }
	    }
	  }
	  return n3;
  }
  \\],
  29: [\\
  function Array_prototype_reduce (arg1, arg2) {
	  var result = arg2;
	  var n0 = this.length;
	  for (var i = 0; i < n0; i += 1) {
	    var n1 = i in this;
	    if (n1) {
	      var n2 = this[i];
	      var n3 = arg1.call(undefined, result, n2, i, this);
	      result = n3;
	    }
	  }
	  return result;
  }
  \\],
  30: [\\
  function Array_prototype_reduceRight (arg1, arg2) {
	  var result = arg2;
	  var n0 = this.length;
	  for (var i = 0; i < n0; i += 1) {
	    var n1 = ((n0-i)-1) in this;
	    if (n1) {
	      var n2 = this[(n0-i)-1];
	      var n3 = arg1.call(undefined, result, n2, (n0-i)-1, this);
	      result = n3;
	    }
	  }
	  return result;
  }
  \\],
  31: [\\
  function Array_prototype_filter (arg1, arg2) {
	  var result = [];
	  var n0 = this.length;
	  for (var i = 0; i < n0; i += 1) {
	    var n1 = i in this;
	    if (n1) {
	      var n2 = this[i];
	      var n3 = arg1.call(arg2, n2, i, this);
	      if (n3) {
	        result[result.length] = n2;
	      }
	    }
	  }
	  return result;
  }
  \\],
  32: [\\
  function String_prototype_toString () {
    return this.$value;
  }
  \\],
  33: [\\
  function stringValueOf () {
    return this.$value;
  }
  \\],
  34: [\\
  function String_prototype_charAt (pos) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  35: [\\
  function String_prototype_charCodeAt (pos) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  36: [\\
  function String_prototype_concat () {
    var result = this;
    
    for(i = 0; i < arguments.length; i++)
      result = result + arguments[i];

    return result;
  }
  \\],
  37: [\\
  function String_prototype_toUpperCase () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  38: [\\
  function String_prototype_toLocaleUpperCase () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  39: [\\
  function String_prototype_toLowerCase () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  40: [\\
  function String_prototype_toLocaleLowerCase () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  41: [\\
  function String_prototype_indexOf (str) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  42: [\\
  function String_prototype_split (separator, limit) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  43: [\\
  function String_prototype_substring (from, to) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  44: [\\
  function String_prototype_slice (from, to) {
	  if(from < 0) from += this.length;
	  if(to < 0) to += this.length;
	  return this.substring(from, to);
  }
  \\],
  45: [\\
  function String_prototype_substr (from, to) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  46: [\\
  function String_prototype_replace (regex, withStr) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  47: [\\
  function String_prototype_match (regexp) {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  48: [\\
  function String_prototype_trim () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  49: [\\
  function loadFile () {
    // magic function body handled in analysis.
  }
  \\],
  50: [\\
  function String_prototype_link (url) {
  }
  \\],
  51: [\\
  function String_prototype_anchor (url) {
	  return new String();
  }
  \\],
  52: [\\
  function Number_prototype_toString () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  53: [\\
  function RegExp_prototype_exec (string) {
	  return [ string, string, string, string, string ] || null;
  }
  \\],
  54: [\\
  function RegExp_prototype_test (string) {
	  return true || false;
  }
  \\],
  55: [\\
  function Date_prototype_getTime () {
    // TODO prologue.js use primitive object see todo file
  }
  \\],
  56: [\\
  function Date_prototype_getDate () {
	  // TODO: model me
  }
  \\],
  57: [\\
  function Date_prototype_setDate () {
	  // TODO: model me
  }
  \\],
  58: [\\
  function Date_prototype_getDay () {
	  // TODO: model me
  }
  \\],
  59: [\\
  function Date_prototype_setDay () {
	  // TODO: model me
  }
  \\],
  60: [\\
  function Date_prototype_getMonth () {
	  // TODO: model me
  }
  \\],
  61: [\\
  function Date_prototype_setMonth () {
	  // TODO: model me
  }
  \\],
  62: [\\
  function Date_prototype_getHours () {
	  // TODO: model me
  }
  \\],
  63: [\\
  function Date_prototype_setHours () {
	  // TODO: model me
  }
  \\],
  64: [\\
  function Date_prototype_getMinutes () {
	  // TODO: model me
  }
  \\],
  65: [\\
  function Date_prototype_setMinutes () {
	  // TODO: model me
  }
  \\],
  66: [\\
  function Date_prototype_getSeconds () {
	  // TODO: model me
  }
  \\],
  67: [\\
  function Date_prototype_setSeconds () {
	  // TODO: model me
  }
  \\],
  68: [\\
  function Date_prototype_getMilliseconds () {
	  // TODO: model me
  }
  \\],
  69: [\\
  function Date_prototype_setMilliseconds () {
	  // TODO: model me
  }
  \\],
  70: [\\
  function Date_prototype_getFullYear () {
	  // TODO: model me
  }
  \\]
}
