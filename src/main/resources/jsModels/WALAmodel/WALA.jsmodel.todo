// the internal primitive mechanism
primitive = new Primitives();

// core definitions needed to make anything work, even what follows
Object = primitive("NewObject");
var local_function = primitive("NewFunction");
Function = local_function;
var local_array = primitive("NewArray");
Array = local_array;
var local_string = primitive("NewString");
String = local_string;
var local_number = primitive("NewNumber");
Number = local_number;
var local_regexp = primitive("NewRegExp");
RegExp = local_regexp;

/************************************************************************/
/* Global properties, see spec 15.1					*/
/************************************************************************/
NaN = primitive("GlobalNaN");

Infinity = primitive("GlobalInfinity");

undefined = primitive("NewUndefined");
$$undefined = undefined;

eval = function eval (x) {
  return primitive("GlobalEval", x); 
};

parseInt = function parseInt (string, radix) { 
  return primitive("GlobalParseInt", string, radix); 
};

parseFloat = function parseFloat (string) {
  return primitive("GlobalParseFloat", string);
};

isNaN = function isNaN (number) {
  return primitive("GlobalIsNaN", number)
};

isFinite = function isFinite (number) {
  return primitive("GlobalIsFinite", number);
};

decodeURI = function decodeURI(str) {
    return new String(primitive("GlobalDecodeURI", str));
};

decodeURIComponent = function decodeURIComponent(str) {
    return new String(primitive("GlobalDecodeURIComponent", str));
};

encodeURI = function encodeURI(str) {
    return new String(primitive("GlobalEncodeURI", str));
};

encodeURIComponent = function encodeURIComponent(str) {
    return new String(primitive("GlobalEncodeURIComponent", str));
};

unescape = function unescape(str){
	return new String(primitive("GlobalUnEscape", str));
};

escape = function escape(str){
	return new String(primitive("GlobalEscape", str));
};

/************************************************************************/
/* Object properties, see spec 15.2					*/
/************************************************************************/

Object$proto$__WALA__ =  {

  prototype: null,

  __proto__: null,
  
  constructor: Object,

  toString: function Object_prototype_toString() {

    return primitive("ObjectToString", this);
  },

  toLocaleString: function Object_prototype_toLocaleString() {

    return primitive("ObjectToLocaleString", this);
  },

  valueOf: function valueOf() { 
    // transformed to .jsmodel
  },

  hasOwnProperty: function Object_prototype_hasOwnProperty (V) {

    return primitive("ObjectHasOwnProperty", this, V);
  },

  isPrototypeOf: function Object_prototype_isPrototypeOf (V) {

    return primitive("ObjectIsPrototypeOf", this, V);
  },
  
  propertyIsEnumerable: function Object_prototype_propertyIsEnumerable (V) {

    return primitive("ObjectPropertyIsEnumerable", this, V);
  }
};

Object.prototype = Object$proto$__WALA__;

/************************************************************************/
/* Function properties, see spec 15.3					*/
/************************************************************************/

Function$proto$__WALA__ = {

  constructor: Function,

  __proto__: Object.prototype, 
  
  toString: function Function_prototype_toString() {

    return primitive("FunctionToString", this);
  },

  apply: function Function_prototype_apply (thisArg, argArray) {

    return primitive("FunctionApply", this, thisArg, argArray);
  },

  call: function Function_prototype_call (thisArg) {

    arguments.shift();
    return primitive("FunctionCall", this, thisArg, arguments);
  },

  bind: function Function_prototype_bind (thisArg) {

    arguments.shift();
    return primitive("FunctionBind", this, thisArg, arguments);
  }
};

local_function.prototype = Function$proto$__WALA__;

local_function.__proto__ = Function.prototype;

/************************************************************************/
/* Array properties, see spec 15.4					*/
/************************************************************************/

local_array.__proto__ = Function.prototype;

Array$proto$__WALA__ = {

  __proto__: Object.prototype,

  constructor: Array,

  toString: function Array_prototype_toString () {
    // transformed to .jsmodel
  },

  toLocaleString: function Array_prototype_toLocaleString () {
    // transformed to .jsmodel
  },

  concat: function Array_prototype_concat () {
    // transformed to .jsmodel
  },

  join: function Array_prototype_join (separator) {
    // transformed to .jsmodel
  },

  pop: function Array_prototype_pop () {
    // transformed to .jsmodel
  },

  push: function Array_prototype_push () {
    // transformed to .jsmodel
  },

  reverse: function Array_prototype_reverse () {
    // transformed to .jsmodel
  },

  shift: function Array_prototype_shift () {
    // transformed to .jsmodel
  },

  unshift: function Array_prototype_unshift () {
    // transformed to .jsmodel
  },

  slice: function Array_prototype_slice (start, end) {
    // transformed to .jsmodel
  },

  sort: function Array_prototype_sort (fn) {
    // transformed to .jsmodel
  },
  
  splice: function Array_prototype_splice(start, delete_count) {
    // transformed to .jsmodel
  },
  
  indexOf: function Array_prototype_indexOf(elt, start) {
    // transformed to .jsmodel
  },
  
  forEach: function Array_prototype_forEach(callback, thisArg) {
    // transformed to .jsmodel
  },
  
  map: function Array_prototype_map(callback, thisArg) {
    // transformed to .jsmodel
  },
  
  item: function Array_prototype_item(index) {
    // transformed to .jsmodel
  },

  every: function Array_prototype_every(arg1, arg2) {
    // transformed to .jsmodel
  },

  some: function Array_prototype_some(arg1, arg2) {
    // transformed to .jsmodel
  },

  reduce: function Array_prototype_reduce(arg1, arg2) {
    // transformed to .jsmodel
  },

  reduceRight: function Array_prototype_reduceRight(arg1, arg2) {
    // transformed to .jsmodel
  },

  filter: function Array_prototype_filter(arg1, arg2) {
    // transformed to .jsmodel
  }

};

Array.isArray = function Array_isArray(a) {
	return true || false;
};

local_array.prototype = Array$proto$__WALA__;

/************************************************************************/
/* String properties, see spec 15.4					*/
/************************************************************************/

local_string.__proto__ = Function.prototype;

String$proto$__WALA__ = {

  __proto__: Object.prototype,

  constructor: String,

  $value: "",

  toString: function String_prototype_toString() {
    // transformed to .jsmodel
  },

  valueOf: function stringValueOf() {
    // transformed to .jsmodel
  },

  charAt: function String_prototype_charAt(pos) {

    return new String(primitive("StringCharAt", pos));
  },

  charCodeAt: function String_prototype_charCodeAt(pos) {

    return new Number(primitive("StringCharCodeAt", pos));
  },

  concat: function String_prototype_concat () {
    // transformed to .jsmodel
  },

  toUpperCase: function String_prototype_toUpperCase() {

    return new String(primitive("StringToUpperCase", this));
  },

  toLocaleUpperCase: function String_prototype_toLocaleUpperCase() {

    return new String(primitive("StringToLocaleUpperCase", this));
  },

  toLowerCase: function String_prototype_toLowerCase() {

    return new String(primitive("StringToLowerCase", this));
  },

  toLocaleLowerCase: function String_prototype_toLocaleLowerCase() {

    return new String(primitive("StringToLocaleLowerCase", this));
  },

  indexOf: function String_prototype_indexOf(str) {

    return new Number(primitive("StringIndexOf", this, str));
  },

  split: function String_prototype_split(separator, limit) {

    var y = primitive("splitCount", this, separator, limit);
    var x = new Array(y);
    for(var i = 0; i < y; i++) {
      x[i] = new String( primitive("splitNth", this, separator, limit, i) );
    }
    return x;
  },

  substring: function String_prototype_substring(from, to) {

	return new String(primitive("StringSubString", this, from, to)); 
  },
  
  slice: function String_prototype_slice(from, to) {
    // transformed to .jsmodel
  },
	  
  substr: function String_prototype_substr(from, to) {

	return new String(primitive("StringSubStr", this, from, to));
  },

  replace: function String_prototype_replace(regex, withStr) {

    // return new String(primitive("StringReplace", this, regex, withStr));
    return this || withStr;
  },
  
  match: function String_prototype_match(regexp) {

	  return new Array(primitive("StringMatch", this, regexp));
  },
  
  trim: function String_prototype_trim() {

	  return new String(primitive("StringTrim", this));
  },
  
  loadFile: function loadFile() {
    // transformed to .jsmodel
  },
  
  link: function String_prototype_link(url) {
    // transformed to .jsmodel
  },
  
  anchor: function String_prototype_anchor(url) {
    // transformed to .jsmodel
  }

};

local_string.prototype = String$proto$__WALA__;

/************************************************************************/
/* Number properties, see spec 15.7					*/
/************************************************************************/

local_number.__proto__ = Function.prototype;

Number$proto$__WALA__ = {

  __proto__: Object.prototype,

  constructor: Number,

  $value: 0,
  
  toString: function Number_prototype_toString() {

	  return primitive("NumberToString", this);
  }

};

local_number.prototype = Number$proto$__WALA__;

/************************************************************************/
/* Math properties, see spec 15.8					*/
/************************************************************************/
Math = {

 E: primitive("MathE"),

 LN10: primitive("MathLN10"),

 LN2: primitive("MathLN2"),

 LOG2E: primitive("MathLOG2E"),

 LOG10E: primitive("MathLOG10E"),

 PI: primitive("PI"),

 SQRT1_2: primitive("MathSQRT1_2"),

 SQRT2: primitive("MathSQRT2"),

 abs: function Math_abs (x) { return (x<0)? -x: x; },

 acos: function Math_acos (x) { return primitive("MathACos", x); },

 asin: function Math_asin (x) { return primitive("MathASin", x); },

 atan: function Math_atan (x) { return primitive("MathATan", x); },

 atan2: function Math_atan2 (y, x) { return primitive("MathATan2", y, x); },

 ceil: function Math_ceil (x) { return primitive("MathCeil", x); },

 cos: function Math_cos (x) { return primitive("MathCos", x); },

 exp: function Math_exp (x) { return primitive("MathExp", x); },

 floor: function Math_floor (x) { return primitive("MathFloor", x); },

 log: function Math_log (x) { return primitive("MathLog", x); },

 max: function Math_max () {
   var i = -Infinity;
   for(var j = 0; j < arguments.length; j++)
     if (arguments[j] > i)
       i = arguments[j];

   return i;
 },

 min: function Math_min () {
   var i = Infinity;
   for(var j = 0; j < arguments.length; j++)
     if (arguments[j] < i)
       i = arguments[j];

   return i;
 },

 pow: function Math_pow (x, y) { return primitive("MathPow", x, y); },

 random: function Math_random() { return primitive("MathRandom"); },

 round: function Math_round (x) { return primitive("MathRound", x); },

 sin: function Math_sin (x) { return primitive("MathSin", x); },

 sqrt: function Math_sqrt (x) { return primitive("MathSqrt", x);},

 tan: function Math_tan (x) { return primitive("MathTan", x); }
};


/************************************************************************/
/* RegExp properties, see spec 15.10					*/
/************************************************************************/

local_regexp.__proto__ = Function.prototype;

RegExp$proto$__WALA__ = {

  __proto__: Object.prototype,

  constructor: RegExp,
  
  exec: function RegExp_prototype_exec(string) {
    // transformed to .jsmodel
  },
  
  test: function RegExp_prototype_test(string) {
    // transformed to .jsmodel
  }

};

local_regexp.prototype = RegExp$proto$__WALA__;

/************************************************************************/
/* Date properties, see spec 15.9					*/
/************************************************************************/

Date = function Date() {};

Date$proto$__WALA__ = {

  __proto__: Object.prototype,

  constructor: Date,
  
  getTime: function Date_prototype_getTime() {

	  return primitive("DateGetTime", this); 
  },
  
  getDate: function Date_prototype_getDate() {
    // transformed to .jsmodel
  },
  
  setDate: function Date_prototype_setDate() {
    // transformed to .jsmodel
  },
  
  getDay: function Date_prototype_getDay() {
    // transformed to .jsmodel
  },
  
  setDay: function Date_prototype_setDay() {
    // transformed to .jsmodel
  },
  
  getMonth: function Date_prototype_getMonth() {
    // transformed to .jsmodel
  },
  
  setMonth: function Date_prototype_setMonth() {
    // transformed to .jsmodel
  },
  
  getHours: function Date_prototype_getHours() {
    // transformed to .jsmodel
  },
  
  setHours: function Date_prototype_setHours() {
    // transformed to .jsmodel
  },
  
  getMinutes: function Date_prototype_getMinutes() {
    // transformed to .jsmodel
  },
  
  setMinutes: function Date_prototype_setMinutes() {
    // transformed to .jsmodel
  },
  
  getSeconds: function Date_prototype_getSeconds() {
    // transformed to .jsmodel
  },
  
  setSeconds: function Date_prototype_setSeconds() {
    // transformed to .jsmodel
  },
  
  getMilliseconds: function Date_prototype_getMilliseconds() {
    // transformed to .jsmodel
  },
  
  setMilliseconds: function Date_prototype_setMilliseconds() {
    // transformed to .jsmodel
  },
  
  getFullYear: function Date_prototype_getFullYear() {
    // transformed to .jsmodel
  }

};

Date.now = function Date_now() {
	return new Date().valueOf();
};

Date.prototype = Data$proto$__WALA__;


/************************************************************************/
/* internal stuff
/************************************************************************/

function Error(str) {
	this.message = new String();
}

function EvalError(str) {
	this.message = new String();
}
