Heap: {
  #Array: {
    [[Call]]: fun(59),
    [[Class]]: "Function",
    [[Construct]]: fun(60),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "isArray": <#Array.isArray, T, F, T>,
    "length": <1, F, F, F>,
    "prototype": <#Array.prototype, F, F, F>
  },
  #Array.isArray: {
    [[Call]]: fun(61),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype: {
    [[Class]]: "Array",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "concat": <#Array.prototype.concat, T, F, T>,
    "constructor": <#Array, T, F, T>,
    "every": <#Array.prototype.every, T, F, T>,
    "filter": <#Array.prototype.filter, T, F, T>,
    "forEach": <#Array.prototype.forEach, T, F, T>,
    "indexOf": <#Array.prototype.indexOf, T, F, T>,
    "join": <#Array.prototype.join, T, F, T>,
    "lastIndexOf": <#Array.prototype.lastIndexOf, T, F, T>,
    "length": <0, T, F, T>,
    "map": <#Array.prototype.map, T, F, T>,
    "pop": <#Array.prototype.pop, T, F, T>,
    "push": <#Array.prototype.push, T, F, T>,
    "reduce": <#Array.prototype.reduce, T, F, T>,
    "reduceRight": <#Array.prototype.reduceRight, T, F, T>,
    "reverse": <#Array.prototype.reverse, T, F, T>,
    "shift": <#Array.prototype.shift, T, F, T>,
    "slice": <#Array.prototype.slice, T, F, T>,
    "some": <#Array.prototype.some, T, F, T>,
    "sort": <#Array.prototype.sort, T, F, T>,
    "splice": <#Array.prototype.splice, T, F, T>,
    "toLocaleString": <#Array.prototype.toLocaleString, T, F, T>,
    "toString": <#Array.prototype.toString, T, F, T>,
    "unshift": <#Array.prototype.unshift, T, F, T>
  },
  #Array.prototype.concat: {
    [[Call]]: fun(40),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.every: {
    [[Call]]: fun(52),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.filter: {
    [[Call]]: fun(56),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.forEach: {
    [[Call]]: fun(54),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.indexOf: {
    [[Call]]: fun(50),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.join: {
    [[Call]]: fun(41),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.lastIndexOf: {
    [[Call]]: fun(51),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.map: {
    [[Call]]: fun(55),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.pop: {
    [[Call]]: fun(42),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Array.prototype.push: {
    [[Call]]: fun(43),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.reduce: {
    [[Call]]: fun(57),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.reduceRight: {
    [[Call]]: fun(58),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.reverse: {
    [[Call]]: fun(44),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Array.prototype.shift: {
    [[Call]]: fun(45),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Array.prototype.slice: {
    [[Call]]: fun(46),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Array.prototype.some: {
    [[Call]]: fun(53),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.sort: {
    [[Call]]: fun(47),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Array.prototype.splice: {
    [[Call]]: fun(48),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Array.prototype.toLocaleString: {
    [[Call]]: fun(39),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Array.prototype.toString: {
    [[Call]]: fun(38),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Array.prototype.unshift: {
    [[Call]]: fun(49),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Boolean: {
    [[Call]]: fun(87),
    [[Class]]: "Function",
    [[Construct]]: fun(88),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "prototype": <#Boolean.prototype, F, F, F>
  },
  #Boolean.prototype: {
    [[Class]]: "Boolean",
    [[Extensible]]: true,
    [[PrimitiveValue]]: false,
    [[Prototype]]: #Object.prototype,
    "constructor": <#Boolean, T, F, T>,
    "toString": <#Boolean.prototype.toString, T, F, T>,
    "valueOf": <#Boolean.prototype.valueOf, T, F, T>
  },
  #Boolean.prototype.toString: {
    [[Call]]: fun(85),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Boolean.prototype.valueOf: {
    [[Call]]: fun(86),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date: {
    [[Call]]: fun(142),
    [[Class]]: "Function",
    [[Construct]]: fun(143),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "UTC": <#Date.UTC, T, F, T>,
    "length": <7, F, F, F>,
    "now": <#Date.now, T, F, T>,
    "parse": <#Date.parse, T, F, T>,
    "prototype": <#Date.prototype, F, F, F>
  },
  #Date.UTC: {
    [[Call]]: fun(145),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <7, F, F, F>
  },
  #Date.now: {
    [[Call]]: fun(146),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.parse: {
    [[Call]]: fun(144),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype: {
    [[Class]]: "Date",
    [[Extensible]]: true,
    [[PrimitiveValue]]: NaN,
    [[Prototype]]: #Object.prototype,
    "constructor": <#Date, T, F, T>,
    "getDate": <#Date.prototype.getDate, T, F, T>,
    "getDay": <#Date.prototype.getDay, T, F, T>,
    "getFullYear": <#Date.prototype.getFullYear, T, F, T>,
    "getHours": <#Date.prototype.getHours, T, F, T>,
    "getMilliseconds": <#Date.prototype.getMilliseconds, T, F, T>,
    "getMinutes": <#Date.prototype.getMinutes, T, F, T>,
    "getMonth": <#Date.prototype.getMonth, T, F, T>,
    "getSeconds": <#Date.prototype.getSeconds, T, F, T>,
    "getTime": <#Date.prototype.getTime, T, F, T>,
    "getTimezoneOffset": <#Date.prototype.getTimezoneOffset, T, F, T>,
    "getUTCDate": <#Date.prototype.getUTCDate, T, F, T>,
    "getUTCDay": <#Date.prototype.getUTCDay, T, F, T>,
    "getUTCFullYear": <#Date.prototype.getUTCFullYear, T, F, T>,
    "getUTCHours": <#Date.prototype.getUTCHours, T, F, T>,
    "getUTCMilliseconds": <#Date.prototype.getUTCMilliseconds, T, F, T>,
    "getUTCMinutes": <#Date.prototype.getUTCMinutes, T, F, T>,
    "getUTCMonth": <#Date.prototype.getUTCMonth, T, F, T>,
    "getUTCSeconds": <#Date.prototype.getUTCSeconds, T, F, T>,
    "setDate": <#Date.prototype.setDate, T, F, T>,
    "setFullYear": <#Date.prototype.setFullYear, T, F, T>,
    "setHours": <#Date.prototype.setHours, T, F, T>,
    "setMilliseconds": <#Date.prototype.setMilliseconds, T, F, T>,
    "setMinutes": <#Date.prototype.setMinutes, T, F, T>,
    "setMonth": <#Date.prototype.setMonth, T, F, T>,
    "setSeconds": <#Date.prototype.setSeconds, T, F, T>,
    "setTime": <#Date.prototype.setTime, T, F, T>,
    "setUTCDate": <#Date.prototype.setUTCDate, T, F, T>,
    "setUTCFullYear": <#Date.prototype.setUTCFullYear, T, F, T>,
    "setUTCHours": <#Date.prototype.setUTCHours, T, F, T>,
    "setUTCMilliseconds": <#Date.prototype.setUTCMilliseconds, T, F, T>,
    "setUTCMinutes": <#Date.prototype.setUTCMinutes, T, F, T>,
    "setUTCMonth": <#Date.prototype.setUTCMonth, T, F, T>,
    "setUTCSeconds": <#Date.prototype.setUTCSeconds, T, F, T>,
    "toDateString": <#Date.prototype.toDateString, T, F, T>,
    "toISOString": <#Date.prototype.toISOString, T, F, T>,
    "toJSON": <#Date.prototype.toJSON, T, F, T>,
    "toLocaleDateString": <#Date.prototype.toLocaleDateString, T, F, T>,
    "toLocaleString": <#Date.prototype.toLocaleString, T, F, T>,
    "toLocaleTimeString": <#Date.prototype.toLocaleTimeString, T, F, T>,
    "toString": <#Date.prototype.toString, T, F, T>,
    "toTimeString": <#Date.prototype.toTimeString, T, F, T>,
    "toUTCString": <#Date.prototype.toUTCString, T, F, T>,
    "valueOf": <#Date.prototype.valueOf, T, F, T>
  },
  #Date.prototype.constructor: {
    [[Call]]: fun(98),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype.getDate: {
    [[Call]]: fun(111),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getDay: {
    [[Call]]: fun(113),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getFullYear: {
    [[Call]]: fun(107),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getHours: {
    [[Call]]: fun(115),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getMilliseconds: {
    [[Call]]: fun(121),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getMinutes: {
    [[Call]]: fun(117),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getMonth: {
    [[Call]]: fun(109),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getSeconds: {
    [[Call]]: fun(119),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getTime: {
    [[Call]]: fun(106),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getTimezoneOffset: {
    [[Call]]: fun(123),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCDate: {
    [[Call]]: fun(112),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCDay: {
    [[Call]]: fun(114),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCFullYear: {
    [[Call]]: fun(108),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCHours: {
    [[Call]]: fun(116),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCMilliseconds: {
    [[Call]]: fun(122),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCMinutes: {
    [[Call]]: fun(118),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCMonth: {
    [[Call]]: fun(110),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.getUTCSeconds: {
    [[Call]]: fun(120),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.setDate: {
    [[Call]]: fun(133),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype.setFullYear: {
    [[Call]]: fun(137),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #Date.prototype.setHours: {
    [[Call]]: fun(131),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <4, F, F, F>
  },
  #Date.prototype.setMilliseconds: {
    [[Call]]: fun(125),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype.setMinutes: {
    [[Call]]: fun(129),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #Date.prototype.setMonth: {
    [[Call]]: fun(135),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Date.prototype.setSeconds: {
    [[Call]]: fun(127),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Date.prototype.setTime: {
    [[Call]]: fun(124),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype.setUTCDate: {
    [[Call]]: fun(134),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype.setUTCFullYear: {
    [[Call]]: fun(138),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #Date.prototype.setUTCHours: {
    [[Call]]: fun(132),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <4, F, F, F>
  },
  #Date.prototype.setUTCMilliseconds: {
    [[Call]]: fun(126),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype.setUTCMinutes: {
    [[Call]]: fun(130),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #Date.prototype.setUTCMonth: {
    [[Call]]: fun(136),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Date.prototype.setUTCSeconds: {
    [[Call]]: fun(128),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Date.prototype.toDateString: {
    [[Call]]: fun(100),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.toISOString: {
    [[Call]]: fun(140),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.toJSON: {
    [[Call]]: fun(141),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Date.prototype.toLocaleDateString: {
    [[Call]]: fun(103),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.toLocaleString: {
    [[Call]]: fun(102),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.toLocaleTimeString: {
    [[Call]]: fun(104),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.toString: {
    [[Call]]: fun(99),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.toTimeString: {
    [[Call]]: fun(101),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.toUTCString: {
    [[Call]]: fun(139),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Date.prototype.valueOf: {
    [[Call]]: fun(105),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Error: {
    [[Call]]: fun(153),
    [[Class]]: "Function",
    [[Construct]]: fun(154),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "prototype": <#Error.prototype, F, F, F>
  },
  #Error.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "constructor": <#Error, T, F, T>,
    "message": <"", T, F, T>,
    "name": <"Error", T, F, T>,
    "toString": <#Error.prototype.toString, T, F, T>
  },
  #Error.prototype.toString: {
    [[Call]]: fun(152),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #EvalError: {
    [[Call]]: fun(155),
    [[Class]]: "Function",
    [[Construct]]: fun(156),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "name": <"EvalError", T, F, T>,
    "prototype": <#EvalError.prototype, F, F, F>
  },
  #EvalError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "constructor": <#EvalError, T, F, T>,
    "message": <"", T, F, T>,
    "name": <"EvalError", T, F, T>
  },
  #Function: {
    [[Call]]: fun(36),
    [[Class]]: "Function",
    [[Construct]]: fun(37),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "prototype": <#Function.prototype, F, F, F>
  },
  #Function.prototype: {
    [[Call]]: fun(31),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    [[Scope]]: null,
    "apply": <#Function.prototype.apply, T, F, T>,
    "bind": <#Function.prototype.bind, T, F, T>,
    "call": <#Function.prototype.call, T, F, T>,
    "constructor": <#Function, T, F, T>,
    "length": <0, F, F, F>,
    "toString": <#Function.prototype.toString, T, F, T>
  },
  #Function.prototype.apply: {
    [[Call]]: fun(33),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Function.prototype.bind: {
    [[Call]]: fun(35),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Function.prototype.call: {
    [[Call]]: fun(34),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Function.prototype.toString: {
    [[Call]]: fun(32),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Global: {
    [[Class]]: "Object",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "<>Global<>global": <#Global, F, F, F>,
    "<>Global<>true": <true, F, F, F>,
    "Array": <#Array, T, F, T>,
    "Boolean": <#Boolean, T, F, T>,
    "Date": <#Date, T, F, T>,
    "Error": <#Error, T, F, T>,
    "EvalError": <#EvalError, T, F, T>,
    "Function": <#Function, T, F, T>,
    "Infinity": <Infinity, F, F, F>,
    "JSON": <#JSON, T, F, T>,
    "Math": <#Math, T, F, T>,
    "NaN": <NaN, F, F, F>,
    "Number": <#Number, T, F, T>,
    "Object": <#Object, T, F, T>,
    "RangeError": <#RangeError, T, F, T>,
    "ReferenceError": <#ReferenceError, T, F, T>,
    "RegExp": <#RegExp, T, F, T>,
    "String": <#String, T, F, T>,
    "SyntaxError": <#SyntaxError, T, F, T>,
    "TypeError": <#TypeError, T, F, T>,
    "URIError": <#URIError, T, F, T>,
    "decodeURI": <#Global.decodeURI, T, F, T>,
    "decodeURIComponent": <#Global.decodeURIComponent, T, F, T>,
    "encodeURI": <#Global.encodeURI, T, F, T>,
    "encodeURIComponent": <#Global.encodeURIComponent, T, F, T>,
    "eval": <#Global.eval, T, F, T>,
    "isFinite": <#Global.isFinite, T, F, T>,
    "isNaN": <#Global.isNaN, T, F, T>,
    "parseFloat": <#Global.parseFloat, T, F, T>,
    "parseInt": <#Global.parseInt, T, F, T>,
    "undefined": <undefined, F, F, F>
  },
  #Global.decodeURI: {
    [[Call]]: fun(6),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.decodeURIComponent: {
    [[Call]]: fun(7),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.encodeURI: {
    [[Call]]: fun(8),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.encodeURIComponent: {
    [[Call]]: fun(9),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.eval: {
    [[Call]]: fun(1),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.isFinite: {
    [[Call]]: fun(5),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.isNaN: {
    [[Call]]: fun(4),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.parseFloat: {
    [[Call]]: fun(3),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Global.parseInt: {
    [[Call]]: fun(2),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #JSON: {
    [[Class]]: "JSON",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "parse": <#JSON.parse, T, F, T>,
    "stringify": <#JSON.stringify, T, F, T>
  },
  #JSON.parse: {
    [[Call]]: fun(185),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #JSON.stringify: {
    [[Call]]: fun(186),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #Math: {
    [[Class]]: "Math",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "E": <2.718281828459045, F, F, F>,
    "LN10": <2.302585092994046, F, F, F>,
    "LN2": <0.6931471805599453, F, F, F>,
    "LOG10E": <0.4342944819032518, F, F, F>,
    "LOG2E": <1.4426950408889634, F, F, F>,
    "PI": <3.141592653589793, F, F, F>,
    "SQRT1_2": <0.7071067811865476, F, F, F>,
    "SQRT2": <1.4142135623730951, F, F, F>,
    "abs": <#Math.abs, T, F, T>,
    "acos": <#Math.acos, T, F, T>,
    "asin": <#Math.asin, T, F, T>,
    "atan": <#Math.atan, T, F, T>,
    "atan2": <#Math.atan2, T, F, T>,
    "ceil": <#Math.ceil, T, F, T>,
    "cos": <#Math.cos, T, F, T>,
    "exp": <#Math.exp, T, F, T>,
    "floor": <#Math.floor, T, F, T>,
    "log": <#Math.log, T, F, T>,
    "max": <#Math.max, T, F, T>,
    "min": <#Math.min, T, F, T>,
    "pow": <#Math.pow, T, F, T>,
    "random": <#Math.random, T, F, T>,
    "round": <#Math.round, T, F, T>,
    "sin": <#Math.sin, T, F, T>,
    "sqrt": <#Math.sqrt, T, F, T>,
    "tan": <#Math.tan, T, F, T>
  },
  #Math.abs: {
    [[Call]]: fun(167),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.acos: {
    [[Call]]: fun(168),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.asin: {
    [[Call]]: fun(169),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.atan: {
    [[Call]]: fun(170),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.atan2: {
    [[Call]]: fun(171),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Math.ceil: {
    [[Call]]: fun(172),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.cos: {
    [[Call]]: fun(173),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.exp: {
    [[Call]]: fun(174),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.floor: {
    [[Call]]: fun(175),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.log: {
    [[Call]]: fun(176),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.max: {
    [[Call]]: fun(177),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Math.min: {
    [[Call]]: fun(178),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Math.pow: {
    [[Call]]: fun(179),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Math.random: {
    [[Call]]: fun(180),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Math.round: {
    [[Call]]: fun(181),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.sin: {
    [[Call]]: fun(182),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.sqrt: {
    [[Call]]: fun(183),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Math.tan: {
    [[Call]]: fun(184),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Number: {
    [[Call]]: fun(96),
    [[Class]]: "Function",
    [[Construct]]: fun(97),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "MAX_VALUE": <1.7976931348623157E+308, F, F, F>,
    "MIN_VALUE": <4.9E-324, F, F, F>,
    "NEGATIVE_INFINITY": <-Infinity, F, F, F>,
    "NaN": <NaN, F, F, F>,
    "POSITIVE_INFINITY": <Infinity, F, F, F>,
    "length": <1, F, F, F>,
    "prototype": <#Number.prototype, F, F, F>
  },
  #Number.prototype: {
    [[Class]]: "Number",
    [[Extensible]]: true,
    [[PrimitiveValue]]: 0,
    [[Prototype]]: #Object.prototype,
    "constructor": <#Number, T, F, T>,
    "toExponential": <#Number.prototype.toExponential, T, F, T>,
    "toFixed": <#Number.prototype.toFixed, T, F, T>,
    "toLocaleString": <#Number.prototype.toLocaleString, T, F, T>,
    "toPrecision": <#Number.prototype.toPrecision, T, F, T>,
    "toString": <#Number.prototype.toString, T, F, T>,
    "valueOf": <#Number.prototype.valueOf, T, F, T>
  },
  #Number.prototype.constructor: {
    [[Call]]: fun(89),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Number.prototype.toExponential: {
    [[Call]]: fun(94),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Number.prototype.toFixed: {
    [[Call]]: fun(93),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Number.prototype.toLocaleString: {
    [[Call]]: fun(91),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Number.prototype.toPrecision: {
    [[Call]]: fun(95),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Number.prototype.toString: {
    [[Call]]: fun(90),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Number.prototype.valueOf: {
    [[Call]]: fun(92),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Object: {
    [[Call]]: fun(16),
    [[Class]]: "Function",
    [[Construct]]: fun(17),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "create": <#Object.create, T, F, T>,
    "defineProperties": <#Object.defineProperties, T, F, T>,
    "defineProperty": <#Object.defineProperty, T, F, T>,
    "freeze": <#Object.freeze, T, F, T>,
    "getOwnPropertyDescriptor": <#Object.getOwnPropertyDescriptor, T, F, T>,
    "getOwnPropertyNames": <#Object.getOwnPropertyNames, T, F, T>,
    "getPrototypeOf": <#Object.getPrototypeOf, T, F, T>,
    "isExtensible": <#Object.isExtensible, T, F, T>,
    "isFrozen": <#Object.isFrozen, T, F, T>,
    "isSealed": <#Object.isSealed, T, F, T>,
    "keys": <#Object.keys, T, F, T>,
    "length": <1, F, F, F>,
    "preventExtensions": <#Object.preventExtensions, T, F, T>,
    "prototype": <#Object.prototype, F, F, F>,
    "seal": <#Object.seal, T, F, T>
  },
  #Object.create: {
    [[Call]]: fun(21),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Object.defineProperties: {
    [[Call]]: fun(23),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Object.defineProperty: {
    [[Call]]: fun(22),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #Object.freeze: {
    [[Call]]: fun(25),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.getOwnPropertyDescriptor: {
    [[Call]]: fun(19),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #Object.getOwnPropertyNames: {
    [[Call]]: fun(20),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.getPrototypeOf: {
    [[Call]]: fun(18),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.isExtensible: {
    [[Call]]: fun(29),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.isFrozen: {
    [[Call]]: fun(28),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.isSealed: {
    [[Call]]: fun(27),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.keys: {
    [[Call]]: fun(30),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.preventExtensions: {
    [[Call]]: fun(26),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.prototype: {
    [[Class]]: "Object",
    [[Extensible]]: true,
    [[Prototype]]: null,
    "constructor": <#Object, T, F, T>,
    "hasOwnProperty": <#Object.prototype.hasOwnProperty, T, F, T>,
    "isPrototypeOf": <#Object.prototype.isPrototypeOf, T, F, T>,
    "propertyIsEnumerable": <#Object.prototype.propertyIsEnumerable, T, F, T>,
    "toLocaleString": <#Object.prototype.toLocaleString, T, F, T>,
    "toString": <#Object.prototype.toString, T, F, T>,
    "valueOf": <#Object.prototype.valueOf, T, F, T>
  },
  #Object.prototype.hasOwnProperty: {
    [[Call]]: fun(13),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.prototype.isPrototypeOf: {
    [[Call]]: fun(14),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.prototype.propertyIsEnumerable: {
    [[Call]]: fun(15),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #Object.prototype.toLocaleString: {
    [[Call]]: fun(11),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Object.prototype.toString: {
    [[Call]]: fun(10),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Object.prototype.valueOf: {
    [[Call]]: fun(12),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #Object.seal: {
    [[Call]]: fun(24),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #RangeError: {
    [[Call]]: fun(157),
    [[Class]]: "Function",
    [[Construct]]: fun(158),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "name": <"RangeError", T, F, T>,
    "prototype": <#RangeError.prototype, F, F, F>
  },
  #RangeError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "constructor": <#RangeError, T, F, T>,
    "message": <"", T, F, T>,
    "name": <"RangeError", T, F, T>
  },
  #ReferenceError: {
    [[Call]]: fun(159),
    [[Class]]: "Function",
    [[Construct]]: fun(160),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "name": <"ReferenceError", T, F, T>,
    "prototype": <#ReferenceError.prototype, F, F, F>
  },
  #ReferenceError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "constructor": <#ReferenceError, T, F, T>,
    "message": <"", T, F, T>,
    "name": <"ReferenceError", T, F, T>
  },
  #RegExp: {
    [[Call]]: fun(150),
    [[Class]]: "Function",
    [[Construct]]: fun(151),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>,
    "prototype": <#RegExp.prototype, F, F, F>
  },
  #RegExp.prototype: {
    [[Class]]: "RegExp",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "constructor": <#RegExp, T, F, T>,
    "exec": <#RegExp.prototype.exec, T, F, T>,
    "test": <#RegExp.prototype.test, T, F, T>,
    "toString": <#RegExp.prototype.toString, T, F, T>
  },
  #RegExp.prototype.exec: {
    [[Call]]: fun(147),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #RegExp.prototype.test: {
    [[Call]]: fun(148),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #RegExp.prototype.toString: {
    [[Call]]: fun(149),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #String: {
    [[Call]]: fun(82),
    [[Class]]: "Function",
    [[Construct]]: fun(83),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "fromCharCode": <#String.fromCharCode, T, F, T>,
    "length": <1, F, F, F>,
    "prototype": <#String.prototype, F, F, F>
  },
  #String.fromCharCode: {
    [[Call]]: fun(84),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype: {
    [[Class]]: "String",
    [[Extensible]]: true,
    [[PrimitiveValue]]: "",
    [[Prototype]]: #Object.prototype,
    "charAt": <#String.prototype.charAt, T, F, T>,
    "charCodeAt": <#String.prototype.charCodeAt, T, F, T>,
    "concat": <#String.prototype.concat, T, F, T>,
    "constructor": <#String, T, F, T>,
    "indexOf": <#String.prototype.indexOf, T, F, T>,
    "lastIndexOf": <#String.prototype.lastIndexOf, T, F, T>,
    "localeCompare": <#String.prototype.localeCompare, T, F, T>,
    "match": <#String.prototype.match, T, F, T>,
    "replace": <#String.prototype.replace, T, F, T>,
    "search": <#String.prototype.search, T, F, T>,
    "slice": <#String.prototype.slice, T, F, T>,
    "split": <#String.prototype.split, T, F, T>,
    "substring": <#String.prototype.substring, T, F, T>,
    "toLocaleLowerCase": <#String.prototype.toLocaleLowerCase, T, F, T>,
    "toLocaleUpperCase": <#String.prototype.toLocaleUpperCase, T, F, T>,
    "toLowerCase": <#String.prototype.toLowerCase, T, F, T>,
    "toString": <#String.prototype.toString, T, F, T>,
    "toUpperCase": <#String.prototype.toUpperCase, T, F, T>,
    "trim": <#String.prototype.trim, T, F, T>,
    "valueOf": <#String.prototype.valueOf, T, F, T>
  },
  #String.prototype.charAt: {
    [[Call]]: fun(65),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.charCodeAt: {
    [[Call]]: fun(66),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.concat: {
    [[Call]]: fun(67),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.constructor: {
    [[Call]]: fun(62),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.indexOf: {
    [[Call]]: fun(68),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.lastIndexOf: {
    [[Call]]: fun(69),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.localeCompare: {
    [[Call]]: fun(70),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.match: {
    [[Call]]: fun(71),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.replace: {
    [[Call]]: fun(72),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #String.prototype.search: {
    [[Call]]: fun(73),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #String.prototype.slice: {
    [[Call]]: fun(74),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #String.prototype.split: {
    [[Call]]: fun(75),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #String.prototype.substring: {
    [[Call]]: fun(76),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #String.prototype.toLocaleLowerCase: {
    [[Call]]: fun(78),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #String.prototype.toLocaleUpperCase: {
    [[Call]]: fun(80),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #String.prototype.toLowerCase: {
    [[Call]]: fun(77),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #String.prototype.toString: {
    [[Call]]: fun(63),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #String.prototype.toUpperCase: {
    [[Call]]: fun(79),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #String.prototype.trim: {
    [[Call]]: fun(81),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #String.prototype.valueOf: {
    [[Call]]: fun(64),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <0, F, F, F>
  },
  #SyntaxError: {
    [[Call]]: fun(161),
    [[Class]]: "Function",
    [[Construct]]: fun(162),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "name": <"SyntaxError", T, F, T>,
    "prototype": <#SyntaxError.prototype, F, F, F>
  },
  #SyntaxError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "constructor": <#SyntaxError, T, F, T>,
    "message": <"", T, F, T>,
    "name": <"SyntaxError", T, F, T>
  },
  #TypeError: {
    [[Call]]: fun(163),
    [[Class]]: "Function",
    [[Construct]]: fun(164),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "name": <"TypeError", T, F, T>,
    "prototype": <#TypeError.prototype, F, F, F>
  },
  #TypeError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "constructor": <#TypeError, T, F, T>,
    "message": <"", T, F, T>,
    "name": <"TypeError", T, F, T>
  },
  #URIError: {
    [[Call]]: fun(165),
    [[Class]]: "Function",
    [[Construct]]: fun(166),
    [[Extensible]]: true,
    [[HasInstance]]: null,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>,
    "name": <"URIError", T, F, T>,
    "prototype": <#URIError.prototype, F, F, F>
  },
  #URIError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "constructor": <#URIError, T, F, T>,
    "message": <"", T, F, T>,
    "name": <"URIError", T, F, T>,
  }
}

Function: {
  1: [\\
  function () {
  }
  \\],
  2: [\\
  function () {
  }
  \\],
  3: [\\
  function () {
  }
  \\],
  4: [\\
  function isNaN (number) {
    // 1. If ToNumber(number) is NaN, return true.
    // 2. Otherwise, return false.
    return @SameValue(@ToNumber(number), NaN);
  }
  \\],
  5: [\\
  function isFinite (number) {
    // 1. If ToNumber(number) is NaN, +Inf or -Inf, return false.
    // 2. Otherwise, return true.
    var num = @ToNumber(number);
    return !@SameValue(num, NaN)
      && !@SameValue(num, Infinity)
      && !@SameValue(num, -Infinity);
  }
  \\],
  6: [\\
  function () {
  }
  \\],
  7: [\\
  function () {
  }
  \\],
  8: [\\
  function () {
  }
  \\],
  9: [\\
  function () {
  }
  \\],
  10: [\\
  function toString () {
    // 1. If the this value is undefined, return "[object Undefined]".
    if (this === undefined) return '[object Undefined]';
    // 2. If the this value is null, return "[object Null]".
    if (this === null) return '[object Null]';
    // 3. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 4. Let class be the value of the [[Class]] internal property of O.
    var class = @Class(O);
    // 5. Return the String value that is the result of concatenating the three Strings "[object ", class, and "]"
    return '[object ' + class + ']';
  }
  \\],
  11: [\\
  function toLocaleString () {
    // XXX it is not exact toLocaleString but just toString.
    // 1. If the this value is undefined, return "[object Undefined]".
    if (this === undefined) return '[object Undefined';
    // 2. If the this value is null, return "[object Null]".
    if (this === null) return '[object Null]';
    // 3. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 4. Let class be the value of the [[Class]] internal property of O.
    var class = @Class(O);
    // 5. Return the String value that is the result of concatenating the three Strings "[object ", class, and "]"
    return '[object ' + class + ']';
  }
  \\],
  12: [\\
  function valueOf () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // XXX: We do not support host object.
    // 2. If O is the result of calling the Object constructor with a host object (15.2.2.1), then
    //   a. Return either O or another value such as the host object originally passed to the constructor.
    //      The specific result that is returned is implementation-defined.
    // 3. Return O
    return O;
  }
  \\],
  13: [\\
  function hasOwnProperty (V) {
    // 1. Let P be ToString(V).
    var P = @ToString(V);
    // 2. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument.
    var desc = @GetOwnProperty(O, P);
    // 4. If desc is undefined, return false.
    if (desc === undefined) return false;
    // 5. Return true.
    return true;
  }
  \\],
  14: [\\
  function isPrototypeOf (V) {
    // 1. If V is not an object, return false.
    if (typeof V !== 'object' || V === null) return false;
    // 2. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 3. Repeat
    var _V = V;
    while (true) {
      // a. Let V be the value of the [[Prototype]] internal property of V.
      V = @Prototype(V);
      // b. if V is null, return false
      if (V === null) return false;
      // c. If O and V refer to the same object, return true.
      if (O === V) return true;
    }
  }
  \\],
  15: [\\
  function propertyIsEnumerable (V) {
    // 1. Let P be ToString(V).
    var P = @ToString(V);
    // 2. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument.
    var desc = @GetOwnProperty(O, P);
    // 4. If desc is undefined, return false.
    if (desc === undefined) return false;
    // 5. Return the value of desc.[[Enumerable]].
    return desc.enumerable;
  }
  \\],
  16: [\\
  function Object (value) {
    if (value === null || value === undefined) return {};
    else return @ToObject(value);
  }
  \\],
  17: [\\
  function Object (value) {
    if (value === null || value === undefined) return {};
    else return @ToObject(value);
  }
  \\],
  18: [\\
  function getPrototypeOf (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Return the value of the [[Prototype]] internal property of O.
    return @Prototype(O);
  }
  \\],
  19: [\\
  function getOwnPropertyDescriptor (O, P) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let name be ToString(P).
    var name = @ToString(P);
    // 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with argument name.
    // 4. Return the result of calling FromPropertyDescriptor(desc) (8.10.4).
    return @GetOwnProperty(O, name);
  }
  \\],
  20: [\\
  function getOwnPropertyNames (O) {
    return @getOwnPropertyNames(O)
  }
  \\],
  21: [\\
  function create (O, Properties) {
    // 1. If Type(O) is not Object or Null throw a TypeError exception.
    if (typeof O !== 'object') throw new TypeError();
    // 2. Let obj be the result of creating a new object as if by the expression new Object() where Object is the
    // standard built-in constructor with that name
    var obj = new Object();
    // 3. Set the [[Prototype]] internal property of obj to O.
    @Prototype(obj, O);
    // 4. If the argument Properties is present and not undefined, add own properties to obj as if by calling the
    // standard built-in function Object.defineProperties with arguments obj and Properties.
    if (Properties !== undefined) Object.defineProperties(obj, Properties);
    // 5. Return obj.
    return obj;
  }
  \\],
  22: [\\
  function defineProperty (O, P, Attributes) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let name be ToString(P).
    var name = @ToString(P);
    // 3. Let desc be the result of calling ToPropertyDescriptor with Attributes as the argument.
    // 4. Call the [[DefineOwnProperty]] internal method of O with arguments name, desc, and true.
    @DefineOwnProperty(O, name, Attributes);
    // 5. Return O.
    return O;
  }
  \\],
  23: [\\
  function defineProperties (O, Properties) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let props be ToObject(Properties).
    var props = @ToObject(Properties);
    // 3. Let names be an internal list containing the names of each enumerable own property of props.
    // 4. Let descriptors be an empty internal List.
    // 5. For each element P of names in list order,
      //   a. Let descObj be the result of calling the [[Get]] internal method of props with P as the argument.
      //   b. Let desc be the result of calling ToPropertyDescriptor with descObj as the argument.
      //   c. Append the pair (a two element List) consisting of P and desc to the end of descriptors.
    // 6. For each pair from descriptors in list order,
    //   a. Let P be the first element of pair.
    //   b. Let desc be the second element of pair.
    //   c. Call the [[DefineOwnProperty]] internal method of O with arguments P, desc, and true.
    var names = @getOwnPropertyNames(props);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      var p_desc = @GetOwnProperty(props, P);
      if (p_desc.enumerable) {
        var desc = props[P];
        @DefineOwnProperty(O, P, desc);
      }
    }
    // 7. Return O.
    return O;
  }
  \\],
  24: [\\
  function seal (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O)
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.
      if (desc.configurable) desc.configurable = false;
      // c. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments.
      @DefineOwnProperty(O, P, desc);
    }
    // 3. Set the [[Extensible]] internal property of O to false.
    @Extensible(O, false);
    // 4. Return O.
    return O;
  }
  \\],
  25: [\\
  function freeze (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If IsDataDescriptor(desc) is true, then
      // i. If desc.[[Writable]] is true, set desc.[[Writable]] to false.
      desc.writable = false;
      // c. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.
      desc.configurable = false;
      // d. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments.
      @DefineOwnProperty(O, P, desc);
    }
    // 3. Set the [[Extensible]] internal property of O to false.
    @Extensible(O, false);
    // 4. Return O.
    return O;
  }
  \\],
  26: [\\
  function preventExtensions (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Set the [[Extensible]] internal property of O to false.
    @Extensible(O, false);
    // 3. Return O.
    return O;
  }
  \\],
  27: [\\
  function isSealed (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If desc.[[Configurable]] is true, then return false.
      if (desc.configurable) return false;
    }
    // 3. If the [[Extensible]] internal property of O is false, then return true.
    if (@Extensible(O) === false) return true;
    // 4. Otherwise, return false.
    else return false;
  }
  \\],
  28: [\\
  function isFrozen (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If IsDataDescriptor(desc) is true then
      // i. If desc.[[Writable]] is true, return false. c. If desc.[[Configurable]] is true, then return false.
      if (desc.writable || desc.configurable) return false;
    }
    // 3. If the [[Extensible]] internal property of O is false, then return true.
    if (@Extensible(O) === false) return true;
    // 4. Otherwise, return false.
    else return false;
  }
  \\],
  29: [\\
  function isExtensible (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Return the Boolean value of the [[Extensible]] internal property of O.
    return @Extensible(O);
  }
  \\],
  30: [\\
  function keys (O) {
    // 1. If the Type(O) is not Object, throw a TypeError exception.
    if (typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let n be the number of own enumerable properties of O
    var names = @getOwnPropertyNames(O);
    // 3. Let array be the result of creating a new Object as if by the expression new Array(n) where Array is
    //    the standard built-in constructor with that name.
    var array = [];
    var n = 0;
    // 4. Let index be 0.
    // 5. For each own enumerable property of O whose name String is P
    // a. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(index), the PropertyDescriptor {[[Value]]: P, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
    // b. Increment index by 1.
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      var desc = @GetOwnProperty(O, P);
      if (desc.enumerable) {
        @DefineOwnProperty(array, @ToString(n), {
          value: P,
          writable: true,
          enumerable: true,
          configurable: true
        });
        n++;
      }
    }
    array.length = n;
    // 6. Return array.
    return array;
  }
  \\],
  31: [\\
  function () {
  }
  \\],
  32: [\\
  function toString() {
    if (typeof this !== 'function') throw new TypeError();
    return @StrTop;
  }
  \\],
  33: [\\
  function apply (thisArg, argArray) {
    // 1. If IsCallable(func) is false, then throw a TypeError exception.
    if (@IsCallable(this) === false) throw new TypeError();
    // 2. If argArray is null or undefined, then
      // a. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and an empty list of arguments.
    if (argArray === null || argArray === undefined) return @Call(this, thisArg, []);
    // 3. If Type(argArray) is not Object, then throw a TypeError exception.
    if (typeof argArray !== 'object' || argArray === null) throw new TypeError();
    // 4. Let len be the result of calling the [[Get]] internal method of argArray with argument "length".
    var len = argArray.length;
    // 5. Let n be ToUint32(len).
    var n = @ToUint32(len);
    // 6. Let argList be an empty List.
    var argList = [];
    // 7. Let index be 0.
    // 8. Repeat while index < n
    for (var index = 0; index < n; index++) {
      // a. Let indexName be ToString(index).
      // b. Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName as the argument.
      // c. Append nextArg as the last element of argList.
      // d. Set index to index + 1.
      argList[index] = argArray[index];
    }
    // 9. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and argList as the list of arguments.
    return @Call(this, thisArg, argList);
  }
  \\],
  34: [\\
  function call (thisArg) {
    // 1. If IsCallable(func) is false, then throw a TypeError exception.
    if (@IsCallable(this) === false) throw new TypeError();
    // 2. Let argList be an empty List.
    var argList = [];
    // 3. If this method was called with more than one argument then in left to right order starting with arg1 append each argument as the last element of argList
    for (var i = 1; i < arguments.length; i++) {
      argList[i-1] = arguments[i];
    }
    // 4. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and argList as the list of arguments.
    return @Call(this, thisArg, argList);
  }
  \\],
  35: [\\
  function () {
  }
  \\],
  36: [\\
  function () {
  }
  \\],
  37: [\\
  function () {
  }
  \\],
  38: [\\
  function toString() {
    // 1. Let array be the result of calling ToObject on the this value.
    var array = @ToObject(this);
    // 2. Let func be the result of calling the [[Get]] internal method of array with argument "join".
    var func = array.join;
    // 3. If IsCallable(func) is false, then let func be the standard built-in method Object.prototype.toString (15.2.4.2).
    if (!@IsCallable(func)) func = Object.prototype.toString;
    // 4. Return the result of calling the [[Call]] internal method of func providing array as the this value and an empty arguments list.
    return @Call(func, array, []);
  }
  \\],
  39: [\\
  function toLocaleString () {
    // 1. Let array be the result of calling ToObject on the this value.
    var array = @ToObject(this);
    // 2. Let func be the result of calling the [[Get]] internal method of array with argument "join".
    var func = array.join;
    // 3. If IsCallable(func) is false, then let func be the standard built-in method Object.prototype.toString (15.2.4.2).
    if (!@IsCallable(func)) func = Object.prototype.toString;
    // 4. Return the result of calling the [[Call]] internal method of func providing array as the this value and an empty arguments list.
    return @Call(func, array, []);
  }
  \\],
  40: [\\
  function concat () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let A be a new array created as if by the expression new Array() where Array is the standard built-in constructor with that name.
    var A = new Array();
    //3. Let n be 0.
    var n = 0;
    // for O
    var E = O;
    if(typeof E === 'object' && E !== null && @Class(E) === "Array"){
      var k = 0;
      var len = E.length;
      while(k<len){
        var P = @ToString(k);
        var exists = (P in E);
        if (exists) {
          var subElement = E[P];
          @DefineOwnProperty(A,@ToString(n),{value:subElement, writable:true, enumerable:true,       configurable:true});
        }
        n += 1;
        k += 1;
      }
    }
    else {
      Object.defineProperty(A,@ToString(n),{value:E,writable:true,enumerable:true,configurable:      true});
      n += 1;
    }
    // 4. Let items be an internal List whose first element is O and whose subsequent elements are, in left to right order, the arguments that were passed to this function invocation.
    var items = arguments;
    // 5. Repeat, while items is not empty
    for (var i = 0; i < items.length; i++) {
      // a. Remove the first element from items and let E be the value of the element.
      var E = items[i];
      // b. If the value of the [[Class]] internal property of E is "Array", then
      if(typeof E === 'object' && E !== null && @Class(E) === "Array"){
        // i. Let k be 0.
        var k = 0;
        // ii. Let len be the result of calling the [[Get]] internal method of E with argument "length".
        var len = E.length;
        // iii. Repeat, while k < len
        while(k<len){
          // 1. Let P be ToString(k).
          var P = @ToString(k);
          // 2. Let exists be the result of calling the [[HasProperty]] internal method of E with P.
          var exists = (P in E);
          // 3. If exists is true, then
          if (exists) {
            // a Let subElement be the result of calling the [[Get]] internal method of E with         argument P.
            var subElement = E[P];
            // b Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n),       Property Descriptor {[[Value]]: subElement, [[Writable]]: true, [[Enumerable]]: true,                  [[Configurable]]: true}, and false.
            @DefineOwnProperty(A,@ToString(n),{value:subElement, writable:true, enumerable:true,       configurable:true});
          }
          // 4. Increase n by 1.
          n += 1;
          // 5. Increase k by 1.
          k += 1;
        }
      }
      // c. Else, E is not an Array
      else {
        // i. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n), Property Descriptor {[[Value]]: E, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
        Object.defineProperty(A,@ToString(n),{value:E,writable:true,enumerable:true,configurable:      true});
        // ii. Increase n by 1.
        n += 1;
      }
    }
    A.length = n;
    // 6. Return A.
    return A;
  }
  \\],
  41: [\\
  function join (separator) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 3. Let len be ToUint32(lenVal).
    var len = @ToUint32(lenVal);
    // 4. If separator is undefined, let separator be the single-character String ",".
    if (arguments.length === 0){
        var separator = ",";
    }
    // 5. Let sep be ToString(separator).
    var sep = @ToString(separator);
    // 6. If len is zero, return the empty String.
    if (len === 0){
        return "";
    }
    // 7. Let element0 be the result of calling the [[Get]] internal method of O with argument "0".
    var element0 = O[0];
    // 8. If element0 is undefined or null, let R be the empty String; otherwise, Let R be ToString(element0).
    if (@SameValue(element0,undefined) || @SameValue(element0,null)){
        var R = "";
    }else {
        var R = @ToString(element0);
    }
    // 9. Let k be 1.
    var k = 1;
    // 10. Repeat, while k < len
    while (k < len) {
      // a. Let S be the String value produced by concatenating R and sep.
      var S = R + sep;
      // b. Let element be the result of calling the [[Get]] internal method of O with argument ToString(k).
      var element = O[@ToString(k)];
      // c. If element is undefined or null, Let next be the empty String; otherwise, let next be ToString(element).
      if (@SameValue(element,undefined) || @SameValue(element,null)) {
        var next = "";
      }else {
        var next = @ToString(element);
      }
      // d. Let R be a String value produced by concatenating S and next.
      var R = S + next;
      // e. Increase k by 1.
      k += 1;
    }
    //11. Return R.
    return R;
  }
  \\],
  42: [\\
  function pop () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 3. Let len be ToUint32(lenVal).
    var len = @ToUint32(lenVal);
    // 4. If len is zero,
    if (@SameValue(len,0)) {
      // a. Call the [[Put]] internal method of O with arguments "length", 0, and true.
      O.length = 0;
      // b. Return undefined.
      return undefined;
    }
    // 5. Else, len > 0
    else {
      // a. Let indx be ToString(len–1).
      var indx = len-1;
      // b. Let element be the result of calling the [[Get]] internal method of O with argument indx.
      var element = O[indx];
      // c. Call the [[Delete]] internal method of O with arguments indx and true.
      delete O[indx];
      // d. Call the [[Put]] internal method of O with arguments "length", indx, and true.
      O.length = indx;
      // e. Return element.
      return element;
    }
  }
  \\],
  43: [\\
  function push () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 3. Let n be ToUint32(lenVal).
    var n = @ToUint32(lenVal);
    // 4. Let items be an internal List whose elements are, in left to right order,
    // the arguments that were passed to this function invocation.
    var items = arguments;
    // 5. Repeat, while items is not empty
    for (var i = 0; i < items.length; i++) {
      // a. Remove the first element from items and let E be the value of the element.
      var E = items[i];
      // b. Call the [[Put]] internal method of O with arguments ToString(n), E, and true.
      O[@ToString(n)] = E
      // c. Increase n by 1.
      n++;
    }
    // 6. Call the [[Put]] internal method of O with arguments "length", n, and true.
    O.length = n
    // 7. Return n.
    return n;
  }
  \\],
  44: [\\
  function reverse () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 3. Let len be ToUint32(lenVal).
    var len = @ToUint32(lenVal);
    // 4. Let middle be floor(len/2).
    var middle = @floor(len/2);
    // 5. Let lower be 0.
    var lower = 0;
    // 6. Repeat, while lower !=  middle
    while(lower != middle){
      // a. Let upper be len-lower-1.
      var upper = len-lower-1;
      // b. Let upperP be ToString(upper).
      var upperP = @ToString(upper);
      // c. Let lowerP be ToString(lower).
      var lowerP = @ToString(lower);
      // d. Let lowerValue be the result of calling the [[Get]] internal method of O with argument lowerP.
      var lowerValue = O[lowerP];
      // e. Let upperValue be the result of calling the [[Get]] internal method of O with argument upperP .
      var upperValue = O[upperP];
      // f. Let lowerExists be the result of calling the [[HasProperty]] internal method of O with argument lowerP.
      var lowerExists = (lowerP in O);
      // g. Let upperExists be the result of calling the [[HasProperty]] internal method of O with argument upperP.
      var upperExists = (upperP in O);
      // h. If lowerExists is true and upperExists is true, then
      if(lowerExists && upperExists){
        // i. Call the [[Put]] internal method of O with arguments lowerP, upperValue, and true .
        O[lowerP] = upperValue;
        // ii. Call the [[Put]] internal method of O with arguments upperP, lowerValue, and true .
        O[upperP] = lowerValue;
      }
      // i. Else if lowerExists is false and upperExists is true, then
      else if(!lowerExists && upperExists){
        // i. Call the [[Put]] internal method of O with arguments lowerP, upperValue, and true .
        O[lowerP] = upperValue;
        // ii. Call the [[Delete]] internal method of O, with arguments upperP and true.
        delete O[upperP];
      }
      // j. Else if lowerExists is true and upperExists is false, then
      else if (lowerExists && !upperExists){
        // i. Call the [[Delete]] internal method of O, with arguments lowerP and true .
        delete O[lowerP];
         // ii. Call the [[Put]] internal method of O with arguments upperP, lowerValue, and true .
         O[upperP] = lowerValue;
      }
      // k. Else both lowerExists and upperExists are false
        // i. No action is required.
      // l. Increase lower by 1.
      lower += 1;
    }
    // 7. Return O .
    return O;
  }
  \\],
  45: [\\
  function shift () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 3. Let len be ToUint32(lenVal).
    var len = @ToUint32(lenVal);
    // 4. If len is zero, then
    if(@SameValue(len,0)){
      // a. Call the [[Put]] internal method of O with arguments "length", 0, and true.
      O.length = 0;
      // b. Return undefined.
      return undefined;
    }
    // 5. Let first be the result of calling the [[Get]] internal method of O with argument "0".
    var first = O[0];
    // 6. Let k be 1.
    var k = 1;
    // 7. Repeat, while k < len
    while (k < len) {
      // a. Let from be ToString(k).
      var from = @ToString(k);
      // b. Let to be ToString(k–1).
      var to = @ToString(k-1);
      // c. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument from.
      var fromPresent = (from in O);
      // d. If fromPresent is true, then
      if(fromPresent){
        // i. Let fromVal be the result of calling the [[Get]] internal method of O with argument from.
        var fromVal = O[from];
        // ii. Call the [[Put]] internal method of O with arguments to, fromVal, and true.
        O[to] = fromVal;
      }
      // e. Else, fromPresent is false
      else{
        // i. Call the [[Delete]] internal method of O with arguments to and true.
        delete O[to];
      }
      // f. Increase k by 1.
      k += 1;
    }
    // 8. Call the [[Delete]] internal method of O with arguments ToString(len–1) and true.
    delete O[@ToString(len-1)];
    // 9. Call the [[Put]] internal method of O with arguments "length", (len–1) , and true.
    O.length = len-1;
    // 10. Return first.
    return first;
  }
  \\],
  46: [\\
  function slice (start, end) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let A be a new array created as if by the expression new Array() where Array is the standard built-in constructor with that name.
    var A = new Array();
    // 3. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 4. Let len be ToUint32(lenVal).
    var len = @ToUint32(lenVal);
    // 5. Let relativeStart be ToInteger(start).
    var relativeStart = @ToInteger(start);
    // 6. If relativeStart is negative, let k be max((len + relativeStart),0); else let k be           min(relativeStart, len).
    if(relativeStart<0){
      var k = Math.max(len+relativeStart,0);
    }else{
      var k = Math.min(relativeStart,len);
    }
    // 7. If end is undefined, let relativeEnd be len; else let relativeEnd be ToInteger(end).
    if(@SameValue(end,undefined)){
      var relativeEnd = len;
    }else{
      var relativeEnd = @ToInteger(end);
    }
    // 8. If relativeEnd is negative, let final be max((len + relativeEnd),0); else let final be       min(relativeEnd, len).
    if(relativeEnd<0){
      var final = Math.max(len+relativeEnd,0);
    }else{
      var final = Math.min(relativeEnd,len);
    }
    // 9. Let n be 0.
    var n = 0;
    // 10. Repeat, while k < final
    while(k<final){
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with        argument Pk.
      var kPresent = Pk in O;
      // c. If kPresent is true, then
      if(kPresent){
        // i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n),         Property Descriptor {[[Value]]: kValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]:    true}, and false.
        @DefineOwnProperty(A,@ToString(n),{value:kValue,writable:true,enumerable:true,configurable:    true});
      }
      // d. Increase k by 1.
      k += 1;
      // e. Increase n by 1.
      n += 1;
    }
    A.length = n;
    // 11. Return A.
    return A;
  }
  \\],
  47: [\\
  function sort (comparefn) {
    // modeled using bubble sort (http://en.wikipedia.org/wiki/Bubble_sort)
    var O = @ToObject(this);
    var len = O.length;
    if (@SameValue(comparefn,undefined)) {
      comparefn = function (left,right) {
        if (left < right) {
          return -1;
        }else if (left == right) {
          return 0;
        }else if (left > right) {
          return 1;
        }
      }
    }
    do {
      var newn = 0;
      for (var i = 1; i< n; i++) {
        var result = compare(a[i-1],a[i]);
        // a[i-1] > a[i]
        if (result === 1) {
          var temp = a[-1];
          a[i-1] = a[i];
          a[i] = temp;
          newn = i;
        }
      }
      n = newn;
    }while (n != 0);
    return O;
  }
  \\],
  48: [\\
  function splice (start, deleteCount) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let A be a new array created as if by the expression new Array()where Array is the standard  built-in constructor with that name.
    var A = new Array();
    // 3. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 4. Let len be ToUint32(lenVal).
    var len = @ToUint32(lenVal);
    // 5. Let relativeStart be ToInteger(start).
    var relativeStart = @ToInteger(start);
    // 6. If relativeStart is negative, let actualStart be max((len + relativeStart),0); else let actualStart be min(relativeStart, len).
    if (relativeStart < 0) {
      var actualStart = Math.max(len + relativeStart, 0);
    }else {
      var actualStart = Math.min(relativeStart, len);
    }
    // 7. Let actualDeleteCount be min(max(ToInteger(deleteCount),0), len – actualStart).
    var actualDeleteCount = Math.min(Math.max(@ToInteger(deleteCount), 0),len - actualStart);
    // 8. Let k be 0.
    var k = 0;
    // 9. Repeat, while k < actualDeleteCount
    while (k < actualDeleteCount) {
      // a. Let from be ToString(actualStart+k).
      var from = @ToString(actualStart + k);
      // b. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with     argument from.
      var fromPresent = (from in O);
      // c. If fromPresent is true, then
      if (fromPresent) {
        // i. Let fromValue be the result of calling the [[Get]] internal method of O with argument    from.
        var fromValue = O[from];
        // ii. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(k),         Property Descriptor {[[Value]]: fromValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
        @DefineOwnProperty(A,@ToString(k),{value : fromValue, writable : true, enumerable : true,      configurable : true});
      }
      // d. Increment k by 1.
      k += 1;
    }
    // 10. Let items be an internal List whose elements are, in left to right order, the portion of    the actual argument list starting with item1. The list will be empty if no such items are present.
    items = new Array();
    for (var i = 0;i < arguments.length - 2;i++) {
      items[i] = arguments[i+2];
    }
    // 11. Let itemCount be the number of elements in items.
    var itemCount = items.length;
    // 12. If itemCount < actualDeleteCount, then
    if ( itemCount < actualDeleteCount) {
      // a. Let k be actualStart.
      var k = actualStart;
      // b. Repeat, while k < (len – actualDeleteCount)
      while ( k < (len - actualDeleteCount)) {
        // i. Let from be ToString(k+actualDeleteCount).
        var from = @ToString(k + actualDeleteCount);
        // ii. Let to be ToString(k+itemCount).
        var to = @ToString(k + itemCount);
        // iii. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument from.
        var fromPresent = (from in O);
        // iv If fromPresent is true, then
        if (fromPresent) {
          // 1. Let fromValue be the result of calling the [[Get]] internal method of O with argument  from.
          var fromValue = O[from];
          // 2. Call the [[Put]] internal method of O with arguments to, fromValue, and true.
          O[to] = fromValue;
        }
        // v. Else, fromPresent is false
        else {
          // 1. Call the [[Delete]] internal method of O with arguments to and true.
          delete O[to];
        }
        // vi. Increase k by 1.
        k += 1;
      }
      //c. Let k be len.
      var k = len;
      // d. Repeat, while k > (len – actualDeleteCount + itemCount)
      while ( k > (len - actualDeleteCount + itemCount)) {
        // i. Call the [[Delete]] internal method of O with arguments ToString(k–1) and true.
       delete O[@ToString(k-1)];
       // ii. Decrease k by 1.
       k -= 1;
      }
    }
    // 13. Else if itemCount > actualDeleteCount, then
    else {
      // a. Let k be (len – actualDeleteCount).
      var k = len - actualDeleteCount;
      // b. Repeat, while k > actualStart
      while ( k > actualStart) {
        // i. Let from be ToString(k + actualDeleteCount – 1).
        var from = @ToString(k + actualDeleteCount - 1);
        // ii. Let to be ToString(k + itemCount – 1)
        var to = @ToString(k + itemCount - 1);
        // iii. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument from.
        var fromPresent = (from in O);
        // iv. If fromPresent is true, then
        if (fromPresent) {
          // 1. Let fromValue be the result of calling the [[Get]] internal method of O with argument  from.
          var fromValue = O[from];
          // 2. Call the [[Put]] internal method of O with arguments to, fromValue, and true.
          O[to] = fromValue;
        }
        // v. Else, fromPresent is false
        else {
          // 1. Call the [[Delete]] internal method of O with argument to and true.
          delete O[to];
        }
        // vi. Decrease k by 1.
        k -= 1;
      }
    }
    // 14. Let k be actualStart.
    var k = actualStart;
    // 15. Repeat, while items is not empty
    for (var i = 0; i < items.length; i++) {
      // a. Remove the first element from items and let E be the value of that element.
      var E = items[i];
      // b. Call the [[Put]] internal method of O with arguments ToString(k), E, and true.
      O[@ToString(k)] = E;
      // c. Increase k by 1.
      k += 1;
    }
    // 16. Call the [[Put]] internal method of O with arguments "length", (len – actualDeleteCount +   itemCount), and true.
    O.length = len - actualDeleteCount + itemCount;
    A.length = actualDeleteCount;
    // 17. Return A.
    return A;
  }
  \\],
  49: [\\
  function unshift () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenVal be the result of calling the [[Get]] internal method of O with argument "length".
    var lenVal = O.length;
    // 3. Let len be ToUint32(lenVal).
    var len = @ToUint32(lenVal);
    // 4. Let argCount be the number of actual arguments.
    var argCount = arguments.length;
    // 5. Let k be len.
    var k = len;
    // 6. Repeat, while k > 0,
    while (k > 0) {
      // a. Let from be ToString(k–1).
      var from = @ToString(k-1);
      // b. Let to be ToString(k+argCount –1).
      var to = @ToString(k + argCount - 1);
      // c. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument from.
      var fromPresent = (from in O);
      // d. If fromPresent is true, then
      if (fromPresent) {
        // i. Let fromValue be the result of calling the [[Get]] internal method of O with argument from.
        var fromValue = O[from];
        // ii. Call the [[Put]] internal method of O with arguments to, fromValue, and true.
        O[to] = fromValue;
      }
      // e. Else, fromPresent is false
      else {
        // i. Call the [[Delete]] internal method of O with arguments to, and true.
        delete O[to];
      }
      // f. Decrease k by 1.
      k -= 1;
    }
    // 7. Let j be 0.
    var j = 0;
    // 8. Let items be an internal List whose elements are, in left to right order, the arguments that were passed to this function invocation.
    var items = arguments;
    // 9. Repeat, while items is not empty
    for (var i = 0; i < items.length; i++) {
      // a. Remove the first element from items and let E be the value of that element.
      var E = items[i];
      // b. Call the [[Put]] internal method of O with arguments ToString(j), E, and true.
      O[@ToString(j)] = E;
      // c. Increase j by 1.
      j += 1;
    }
    // 10. Call the [[Put]] internal method of O with arguments "length", len+argCount, and true.
    O.length = len + argCount;
    // 11. Return len+argCount.
    return len + argCount;
  }
  \\],
  50: [\\
  function indexOf (searchElement,fromIndex) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If len is 0, return -1.
    if (@SameValue(len,0)){
      return -1;
    }
    // 5. If argument fromIndex was passed let n be ToInteger(fromIndex); else let n be 0.
    if (arguments.length >1){
      var n = @ToInteger(fromIndex);
    }else{
      var n = 0;
    }
    // 6. If n ≥ len, return -1.
    if (n>=len){
      return -1;
    }
    // 7. Ifn≥0,then
    if (n>=0){
      // a. Let k be n.
      var k = n;
    }
    // 8. Else, n<0
    else{
      // a. Let k be len - abs(n).
      var k = len - @abs(n);
      // b. If k is less than 0,then let k be 0.
      if (k<0){
        var k = 0;
      }
    }
    // 9. Repeat, while k<len
    while (k<len){
      // a. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument ToString(k).
      var kPresent = (@ToString(k) in O);
      // b. If kPresent is true, then
      if (kPresent){
        // i. Let elementK be the result of calling the [[Get]] internal method of O with the argument ToString(k).
        var elementK = O[@ToString(k)];
        // ii. Let same be the result of applying the Strict Equality Comparison Algorithm to searchElement and elementK.
        var same = (searchElement === elementK);
        // iii. If same is true, return k.
        if (same) {
          return k;
        }
      }
      // c. Increase k by 1.
      k +=1;
    }
    // 10. Return -1.
    return -1;
  }
  \\],
  51: [\\
  function lastIndexOf (searchElement,fromIndex) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument        "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If len is 0, return -1.
    if (@SameValue(len,0)) {
      return -1;
    }
    // 5. If argument fromIndex was passed let n be ToInteger(fromIndex); else let n be len-1.
    if(arguments.length>1){
      var n = @ToInteger(fromIndex);
    }else {
      var n = len-1;
    }
    // 6. If n ≥ 0, then let k be min(n,len–1).
    if (n>=0){
      var k = Math.min(n,len-1);
    }
    // 7. Else,n<0
    else {
      // a. Let k be len - abs(n).
      var k = len - @abs(n);
    }
    // 8. Repeat, while k≥ 0
    while (k>=0) {
      // a. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument  ToString(k).
      var kPresent = (@ToString(k) in O);
      // b. If kPresent is true, then
      if (kPresent) {
        // i. Let elementK be the result of calling the [[Get]] internal method of O with the argument    ToString(k).
        var elementK = O[@ToString(k)];
        // ii. Let same be the result of applying the Strict Equality Comparison Algorithm to             searchElement and elementK.
        var same = (searchElement === elementK);
        // iii. If same is true, return k.
        if (same) {
          return k;
        }
      }
      // c. Decrease k by 1.
      k -= 1;
    }
    // 9. Return -1.
    return -1;
  }
  \\],
  52: [\\
  function every (callbackfn, thisArg) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (@IsCallable(callbackfn) === false) {
      throw new TypeError();
    }
    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (arguments.length > 1) {
      var T = thisArg;
    }else {
      var T = undefined;
    }
    // 6. Let k be 0.
    var k = 0;
    // 7. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
      var kPresent = (Pk in O);
      // c. If kPresent is true, then
      if (kPresent) {
        // i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Let testResult be the result of calling the [[Call]] internal method of callbackfn with T as the this value and argument list containing kValue, k, and O.
        var testResult = @Call(callbackfn,T,[kValue,k,O]);
        // iii. If ToBoolean(testResult) is false, return false.
        if (@ToBoolean(testResult) === false) {
          return false;
        }
      }
      // d. Increase k by 1.
      k += 1;
    }
    //8. Return true.
    return true;
  }
  \\],
  53: [\\
  function some (callbackfn, thisArg) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (@IsCallable(callbackfn) === false) {
      throw new TypeError();
    }
    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (arguments.length > 1) {
      var T = thisArg;
    }else {
      var T = undefined;
    }
    // 6. Let k be 0.
    var k = 0; 
    // 7. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
      var kPresent = (Pk in O);
      // c. If kPresent is true, then
      if (kPresent) {
        // i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Let testResult be the result of calling the [[Call]] internal method of callbackfn with T as the this value and argument list containing kValue, k, and O.
        var testResult = @Call(callbackfn,T,[kValue,k,O]);
        // iii. If ToBoolean(testResult) is true, return true.
        if (@ToBoolean(testResult) === true) {
          return true;
        }
      }
      // d. Increase k by 1.
      k += 1;
    }
    // 8. Return false.
    return false;
  }
  \\],
  54: [\\
  function forEach (callbackfn, thisArg) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (@IsCallable(callbackfn) === false) {
      throw new TypeError();
    }
    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (arguments.length > 1){
      var T = thisArg;
    }else {
      var T = undefined;
    }
    // 6. Let k be 0.
    var k = 0;
    // 7. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
      var kPresent = (Pk in O);
      // c. If kPresent is true, then
      if (kPresent) {
        // i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Call the [[Call]] internal method of callbackfn with T as the this value and argument list containing kValue, k, and O.
        @Call(callbackfn,T,[kValue,k,O])
      }
      // d. Increase k by 1.
      k += 1;
    }
    // 8. Return undefined.
    return undefined;
  }
  \\],
  55: [\\
  function map (callbackfn, thisArg) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (@IsCallable(callbackfn) === false) {
      throw new TypeError();
    }
    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (arguments.length > 1){
      var T = thisArg;
    }else {
      var T = undefined;
    }
    // 6. Let A be a new array created as if by the expression new Array(len) where Array is the standard built-in constructor with that name and len is the value of len.
    var A = new Array(len);
    // 7. Let k be 0.
    var k = 0;
    // 8. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
      var kPresent = (Pk in O);
      // c. If kPresent is true, then
      if (kPresent) {
        // i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Let mappedValue be the result of calling the [[Call]] internal method of callbackfn with T as the this value and argument list containing kValue, k, and O.
        var mappedValue = @Call(callbackfn,T,[kValue,k,O]);
        // iii. Call the [[DefineOwnProperty]] internal method of A with arguments Pk, Property Descriptor {[[Value]]: mappedValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
        @DefineOwnProperty(A,Pk,{value:mappedValue,writable:true,enumerable:true,configurable:true});
      }
      // d. Increase k by 1.
      k += 1;
    }
    //9. Return A.
    return A;
  }
  \\],
  56: [\\
  function filter (callbackfn, thisArg) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (@IsCallable(callbackfn) === false) {
      throw new TypeError();
    }
    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (arguments.length >1) {
      var T = thisArg;
    }else {
      var T = undefined;
    }
    // 6. Let A be a new array created as if by the expression new Array() where Array is the standard built-in constructor with that name.
    var A = new Array();
    // 7. Letk be 0.
    var k = 0;
    // 8. Let to be 0.
    var to = 0;
    // 9. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
      var kPresent = (Pk in O);
      // c. If kPresent is true, then
      if (kPresent) {
        // i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Let selected be the result of calling the [[Call]] internal method of callbackfn with T as the this value and argument list containing kValue, k, and O.
        var selected = @Call(callbackfn,T,[kValue,k,O]);
        // iii. If ToBoolean(selected) is true, then
        if (@ToBoolean(selected) === true) {
          // 1. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(to), Property Descriptor {[[Value]]: kValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
          @DefineOwnProperty(A,@ToString(to),{value:kValue,writable:true,enumerable:true,configurable:true});
          // 2. Increase to by 1.
          to += 1;
        }
      }
      // d. Increase k by 1.
      k += 1;
    }
    // 10. Return A.
    return A;
  }
  \\],
  57: [\\
  function reduce(callbackfn, initialValue) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (@IsCallable(callbackfn) === false) {
      throw new TypeError();
    }
    // 5. If len is 0 and initialValue is not present, throw a TypeError exception.
    if (len === 0 && arguments.length < 2) {
      throw new TypeError();
    }
    // 6. Let k be 0.
    var k = 0;
    // 7. If initialValue is present, then
    if (arguments.length > 1) {
      // a. Set accumulator to initialValue.
      var accumulator = initialValue;
    }
    // 8. Else, initialValue is not present
    else {
      // a. Let kPresent be false.
      var kPresent = false;
      // b. Repeat, while kPresent is false and k < len
      while (kPresent === false && k < len) {
        // i. Let Pk be ToString(k).
        var Pk = @ToString(k);
        //ii. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
        var kPresent = (Pk in O);
        // iii. If kPresent is true, then
        if (kPresent) {
          // 1. Let accumulator be the result of calling the [[Get]] internal method of O with argument Pk.
          var accumulator = O[Pk];
        }
        // iv. Increase k by 1.
        k += 1;
      }
      // c. If kPresent is false, throw a TypeError exception.
      if (!kPresent) {
        throw new TypeError();
      }
    }
    // 9. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
      var kPresent = (Pk in O);
      // c. If kPresent is true, then
      if (kPresent) {
        // i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Let accumulator be the result of calling the [[Call]] internal method of callbackfn with undefined as the this value and argument list containing accumulator, kValue, k, and O.
        var accumulator = @Call(callbackfn,undefined,[accumulator,kValue,k,O]);
      }
      // d. Increase k by 1.
      k += 1;
    }
    // 10. Return accumulator.
    return accumulator;
  }
  \\],
  58: [\\
  function reduceRight (callbackfn, initialValue) {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument "length".
    var lenValue = O.length;
    // 3. Let len be ToUint32(lenValue).
    var len = @ToUint32(lenValue);
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (@IsCallable(callbackfn) === false) {
      throw new TypeError();
    }
    // 5. If len is 0 and initialValue is not present, throw a TypeError exception.
    if (len === 0 && arguments.length < 2) {
      throw new TypeError();
    }
    // 6. Let k be len-1.
    var k = len - 1;
    // 7. If initialValue is present, then
    if (arguments.length > 1) {
      // a. Set accumulator to initialValue.
      var accumulator = initialValue;
    }
    // 8. Else, initialValue is not present
    else {
      // a. Let kPresent be false.
      var kPresent = false;
      // b. Repeat, while kPresent is false and k ≥ 0
      while (kPresent === false && k >= 0) {
        // i. Let Pk be ToString(k).
        var Pk = @ToString(k);
        // ii. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
        var kPresent = (Pk in O);
        // iii. If kPresent is true, then
        if (kPresent) {
          // 1. Let accumulator be the result of calling the [[Get]] internal method of O with argument Pk.
          var accumulator = O[Pk]
        }
        // iv. Decrease k by 1.
        k -= 1;
      }
      // c. If kPresent is false, throw a TypeError exception.
      if (!kPresent) {
        throw new TypeError();
      }
    }
    // 9. Repeat, while k ≥ 0
    while (k >= 0) {
      // a. Let Pk be ToString(k).
      var Pk = @ToString(k);
      // b. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.
      var kPresent = (Pk in O);
      // c. If kPresent is true, then
      if (kPresent) {
        //i. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.
        var kValue = O[Pk];
        // ii. Let accumulator be the result of calling the [[Call]] internal method of callbackfn with undefined as the this value and argument list containing accumulator, kValue, k, and O.
        var accumulator = @Call(callbackfn,undefined,[accumulator,kValue,k,O]);
      }
      // d. Decrease k by 1.
      k -= 1;
    }
    // 10. Return accumulator.
    return accumulator;
  }
  \\],
  59: [\\
  function Array (len) {
    var arr = [];
    if (arguments.length === 1) {
      if (typeof len === 'number') {
        if (@SameValue(@ToUint32(len), len)) arr.length = len;
        else throw new RangeError();
      } else {
        arr.length = 1;
        arr[0] = len;
      }
    } else {
      for (var i = 0; i < arguments.length; i++) {
        arr[i] = arguments[i];
      }
      arr.length = arguments.length;
    }
    return arr;
  }
  \\],
  60: [\\
  function Array (len) {
    var arr = [];
    if (arguments.length === 1) {
      if (typeof len === 'number') {
        if (@SameValue(@ToUint32(len), len)) arr.length = len;
        else throw new RangeError();
      } else {
        arr.length = 1;
        arr[0] = len;
      }
    } else {
      for (var i = 0; i < arguments.length; i++) {
        arr[i] = arguments[i];
      }
      arr.length = arguments.length;
    }
    return arr;
  }
  \\],
  61: [\\
  function isArray (arg) {
    // 1. If Type(arg) is not Object, return false.
    if (typeof arg !== "object" || arg === null) return false;
    // 2. If the value of the [[Class]] internal property of arg is "Array", then return true.
    if (@SameValue(@Class(arg), "Array")) return true;
    // 3. Return false.
    return false;
  }
  \\],
  62: [\\
  function () {
  }
  \\],
  63: [\\
  function toString () {
    // it throws a TypeError exception if its this value is not a String or a String object.
    if (typeof this === "string") return this;
    else if (typeof this === "object" && this !== null && @Class(this) === "String") return @PrimitiveValue(this);
    else throw new TypeError();
  }
  \\],
  64: [\\
  function valueOf () {
    // it throws a TypeError exception if its this value is not a String or String object.
    // Returns this String value.
    if (typeof this === "string") return this;
    else if (typeof this === "object" && this !== null && @Class(this) === "String") return @PrimitiveValue(this);
    else throw new TypeError();
  }
  \\],
  65: [\\
  function charAt (pos) {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if((@SameValue(undefined,this)) || (@SameValue(null,this))){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let position be ToInteger(pos).
    var position = @ToInteger(pos);
    // 4. Let size be the number of characters in S.
    var size = S.length;
    // 5. If position < 0 or position ≥ size, return empty String.
    if((position<0) || (position>=size)){
      return "";
    }
    // 6. Return a String of length 1, containing one character from S, namely the character at position position, where the first (leftmost) character in S is considered to be at position 0, the next one at position 1, and so on.
    return S[position];
  }
  \\],
  66: [\\
  function charCodeAt (pos) {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if((@SameValue(undefined,this)) || (@SameValue(null,this))){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let position be ToInteger(pos).
    var position = @ToInteger(pos);
    // 4. Let size be the number of characters in S.
    var size = S.length;
    // 5. If position < 0 or position ≥ size, return NaN.
    if((position<0) || (position>=size)){
      return NaN;
    }
    // 6. Return a value of Number type, whose value is the code unit value of the character at position position in the String S, where the first (leftmost) character in S is considered to be at position 0, the next one at position 1, and so on.
    // TODO implement @ToUint16
    // Need char -> Unicode-16
    // return @ToUint16(S[position]);
    return @ToNumber(S[position]);
  }
  \\],
  67: [\\
  function concat () {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if (@SameValue(this,undefined) || @SameValue(this,null)){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let args be an internal list that is a copy of the argument list passed to this function.
    var args = arguments;
    // 4. Let R be S.
    var R = S;
    // 5. Repeat, while args is not empty
    for (var i = 0; i < args.length; i++) {
      // a. Remove the first element from args and let next be the value of that element.
      var next = args[i];
      // b. Let R be the String value consisting of the characters in the previous value of R followed by the characters of ToString(next).
      var R = R + @ToString(next);
    }
    // 6. Return R.
    return R;
  }
  \\],
  68: [\\
  function indexOf (searchString,position) {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if (@SameValue(this,undefined) || @SameValue(this,null)){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let searchStr be ToString(searchString).
    var searchStr = @ToString(searchString);
    // 4. Let pos be ToInteger(position). (If position is undefined, this step produces the value 0).
    var pos = @ToInteger(position);
    // 5. Let len be the number of characters in S.
    var len = S.length;
    // 6. Let start be min(max(pos, 0), len).
    var start = Math.min(Math.max(pos,0),len);
    // 7. Let searchLen be the number of characters in searchStr.
    var searchLen = searchStr.length;
    //8. Return the smallest possible integer k not smaller than start such that k+ searchLen is not      greater than len,and for all nonnegative integers j less than searchLen, the character at position k+j of S is the same as the character at position j of searchStr; but if there is no such integer k, then return the value -1.
    var k = start;
    while (k+searchLen<=len) {
      var p = 0;
      for (var j=0;j<searchLen;j++) {
        if (S[k+j] !== searchStr[j]) break;
        p+=1;
      }
      if (p === searchLen){
        return k;
      }
      k += 1;
    }
    return -1;
  }
  \\],
  69: [\\
  function lastIndexOf (searchString,position) {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if(@SameValue(undefined,this) || @SameValue(null,this)){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let searchStr be ToString(searchString).
    var searchStr = @ToString(searchString);
    // 4. Let numPos be ToNumber(position). (If position is undefined, this step produces the value NaN).
    var numPos = @ToNumber(position);
    // 5. If numPos is NaN, let pos be + ; otherwise, let pos be ToInteger(numPos).
    if (@SameValue(NaN,numPos)){
      var pos = Infinity;
    }else {
      var pos = @ToInteger(numPos);
    }
    // 6. Let len be the number of characters in S.
    var len = S.length;
    // 7. Let start min(max(pos, 0), len).
    var start = Math.min(Math.max(pos,0),len);
    // 8. Let searchLen be the number of characters in searchStr.
    var searchLen = searchStr.length;
    // 9. Return the largest possible nonnegative integer k not larger than start such that k+ searchLen  is not greater than len, and for all nonnegative integers j less than searchLen, the character at         position k+j of S is the same as the character at position j of searchStr; but if there is no such        integer k, then return the value -1.
    var k = start;
    while (k>=0){
      if ((k+searchLen) <= len){
        var p = 0;
        for (var j=0;j<searchLen;j++) {
          if (S[k+j] !== searchStr[j]) {
            break;
          }
          p += 1;
        }
        if (p === searchLen){
          return k;
        }
      }
    }
    return -1;
  }
  \\],
  70: [\\
  function localeCompare (that) {
    /*
    // 1. Call CheckObjectCoercible passing the this value as its argument.
     if (@SameValue(undefined,this) || @SameValue(null,this)){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let That be ToString(that).
    var that = @ToString(that);
    */
    // TODO char -> Unicode-16 translation
    return @NumTop;
  }
  \\],
  71: [\\
  function () {
  }
  \\],
  72: [\\
  function () {
  }
  \\],
  73: [\\
  function () {
  }
  \\],
  74: [\\
  function slice (start,end) {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if (@SameValue(undefined,this) || @SameValue(null,this)){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let len be the number of characters in S.
    var len = S.length;
    // 4. Let intStart be ToInteger(start).
    var intStart = @ToInteger(start);
    // 5. If end is undefined, let intEnd be len; else let intEnd be ToInteger(end).
    if (@SameValue(end,undefined)){
      var intEnd = len;
    }else {
      var intEnd = @ToInteger(end);
    }
    // 6. If intStart is negative, let from be max(len + intStart,0); else let from be min(intStart, len).
    if (intStart < 0) {
      var from = Math.max(len+intStart,0);
    }else {
      var from = Math.min(intStart,len);
    }
    // 7. If intEnd is negative, let to be max(len + intEnd,0); else let to be min(intEnd, len).
    if (intEnd < 0){
      var to = Math.max(len + intEnd,0);
    }else {
      var to = Math.min(intEnd,len);
    }
    // 8. Let span be max(to – from,0).
    var span = Math.max(to-from,0);
    // 9. Return a String containing span consecutive characters from S beginning with the character at   position from.
    var Str = "";
    for (var i = 0;i<span;i++) {
      Str = Str + S[from+i];
    }
    return Str;
  }
  \\],
  75: [\\
  function () {
  }
  \\],
  76: [\\
  function substring (start,end ) {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if(@SameValue(this,undefined) || @SameValue(this,null)) {
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let len be the number of characters in S.
    var len = S.length;
    // 4. Let intStart be ToInteger(start).
    var intStart = @ToInteger(start);
    // 5. If end is undefined, let intEnd be len; else let intEnd be ToInteger(end).
    if (@SameValue(end,undefined)){
      var intEnd = len;
    }else {
      var intEnd = @ToInteger(end);
    }
    // 6. Let finalStart be min(max(intStart, 0), len).
    var finalStart = Math.min(Math.max(intStart,0),len);
    // 7. Let finalEnd be min(max(intEnd, 0), len).
    var finalEnd = Math.min(Math.max(intEnd,0),len);
    // 8. Let from be min(finalStart, finalEnd).
    var from = Math.min(finalStart,finalEnd);
    // 9. Let to be max(finalStart, finalEnd).
    var to = Math.max(finalStart,finalEnd);
    // 10. Return a String whose length is to - from, containing characters from S, namely the characters with indices from through to -1, in ascending order.
    var Str = "";
    for (var i = 0; i<(to-from);i++){
      Str = Str + S[from+i];
    }
    return Str;
  }
  \\],
  77: [\\
  function toLowerCase () {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if(@SameValue(this,undefined) || @SameValue(this,null)) {
      throw new TypeError();
    }
    //2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    //3. Let L be a String where each character of L is either the Unicode lowercase equivalent of the corresponding character of S or the actual corresponding character of S if no Unicode lowercase equivalent exists.
    alpha = {"A":"a","B":"b","C":"c","D":"d","E":"e","F":"f","G":"g","H":"h","I":"i","J":"j","K":"k","L":"l","M":"m","N":"n","O":"o","P":"p","Q":"q","R":"r","S":"s","T":"t","U":"u","V":"v","W":"w","X":"x","Y":"y","Z":"z"}
    L = "";
    for (var i = 0; i < S.length; i++){
      if (S[i] in alpha) {
        L += alpha[S[i]];
      }else {
        L += S[i];
      }
    }
    //4. Return L.
    return L;
  }
  \\],
  78: [\\
  function toLocaleLowerCase () {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if(@SameValue(this,undefined) || @SameValue(this,null)) {
      throw new TypeError();
    }
    //2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    //3. Let L be a String where each character of L is either the Unicode lowercase equivalent of the corresponding character of S or the actual corresponding character of S if no Unicode lowercase equivalent exists.
    alpha = {"A":"a","B":"b","C":"c","D":"d","E":"e","F":"f","G":"g","H":"h","I":"i","J":"j","K":"k","L":"l","M":"m","N":"n","O":"o","P":"p","Q":"q","R":"r","S":"s","T":"t","U":"u","V":"v","W":"w","X":"x","Y":"y","Z":"z"}
    L = "";
    for (var i = 0; i < S.length; i++){
      if (S[i] in alpha) {
        L += alpha[S[i]];
      }else {
        L += S[i];
      }
    }
    //4. Return L.
    return L;
  }
  \\],
  79: [\\
  function toUpperCase () {
    // This function behaves in exactly the same way as String.prototype.toLowerCase, except that characters are mapped to their uppercase equivalents as specified in the Unicode Character Database.
    if(@SameValue(this,undefined) || @SameValue(this,null)) {
      throw new TypeError();
    }
    var S = @ToString(this);
    alpha = {"a":"A","b":"B","c":"C","d":"D","e":"E","f":"F","g":"G","h":"H","i":"I","j":"J","k":"K","l":"L","m":"M","n":"N","o":"O","p":"P","q":"Q","r":"R","s":"S","t":"T","u":"U","v":"V","w":"W","x":"X","y":"Y","z":"Z"}
    L = "";
    for (var i = 0; i < S.length; i++){
      if (S[i] in alpha) {
        L += alpha[S[i]];
      }else {
        L += S[i];
      }
    }
    return L;
  }
  \\],
  80: [\\
  function toLocaleUpperCase () {
    // This function behaves in exactly the same way as String.prototype.toLowerCase, except that characters are mapped to their uppercase equivalents as specified in the Unicode Character Database.
    if(@SameValue(this,undefined) || @SameValue(this,null)) {
      throw new TypeError();
    }
    var S = @ToString(this);
    alpha = {"a":"A","b":"B","c":"C","d":"D","e":"E","f":"F","g":"G","h":"H","i":"I","j":"J","k":"K","l":"L","m":"M","n":"N","o":"O","p":"P","q":"Q","r":"R","s":"S","t":"T","u":"U","v":"V","w":"W","x":"X","y":"Y","z":"Z"}
    L = "";
    for (var i = 0; i < S.length; i++){
      if (S[i] in alpha) {
        L += alpha[S[i]];
      }else {
        L += S[i];
      }
    }
    return L;
  }
  \\],
  81: [\\
  function trim () {
    // 1. Call CheckObjectCoercible passing the this value as its argument.
    if (@SameValue(undefined,this) || @SameValue(null,this)){
      throw new TypeError();
    }
    // 2. Let S be the result of calling ToString, giving it the this value as its argument.
    var S = @ToString(this);
    // 3. Let T be a String value that is a copy of S with both leading and trailing white space removed. The definition of white space is the union of WhiteSpace and LineTerminator.
    var f = 0;
    while (S[f] === " "){
      f += 1;
    }
    var t = S.length - 1;
    while (S[t] === " "){
      t -= 1;
    }
    t +=1;
    var T = S.substring(f,t);
    // 4. Return T.
    return T;
  }
  \\],
  82: [\\
  function String (value) {
    // Returns a String value (not a String object) computed by ToString(value). If value is not supplied, the empty String "" is returned.
    if(arguments.length === 0){
      return "";
    }else{
      return @ToString(value);
    }
  }
  \\],
  83: [\\
  function String (value) {
    if (arguments.length === 0) {
      return @StrObj("");
    } else {
      return @StrObj(value);
    }
  }
  \\],
  84: [\\
  function fromCharCode () {
    // Returns a String value containing as many characters as the number of arguments. Each argument specifies one character of the resulting String, with the first argument specifying the first character, and so on, from left to right. An argument is converted to a character by applying the operation ToUint16 (9.7) and regarding the resulting 16-bit integer as the code unit value of a character. If no arguments are supplied, the result is the empty String.
    // Need ToUint16;
    // Need unicode-16 -> char translation
    return @StrTop
  }
  \\],
  85: [\\
  function toString () {
    // 1. Let B be the this value.
    var B = this;
    var b;
    // 2. If Type(B) is Boolean, then let b be B.
    if (typeof B === "Boolean") b = B;
    // 3. Else if Type(B) is Object and the value of the [[Class]] internal property of B is "Boolean",
    //    then let b be the value of the [[PrimitiveValue]] internal property of B.
    else if (typeof B === "object" && B !== null && @Class(B) === "Boolean") b = @PrimitiveValue(B);
    // 4. Else throw a TypeError exception.
    else throw new TypeError();
    // 5. If b is true, then return "true"; else return "false".
    if (b) return "true";
    else return "false";
  }
  \\],
  86: [\\
  function valueOf () {
    // 1. Let B be the this value.
    var B = this;
    var b;
    // 2. If Type(B) is Boolean, then let b be B.
    if (typeof B === "boolean") b = B;
    // 3. Else if Type(B) is Object and the value of the [[Class]] internal property of B is "Boolean",
    //    then let b be the value of the [[PrimitiveValue]] internal property of B.
    else if (typeof B === "object" && B !== null && @Class(B) === "Boolean") b = @PrimitiveValue(B);
    // 4. Else throw a TypeError exception.
    else throw new TypeError();
    // 5. Return b.
    return b;
  }
  \\],
  87: [\\
  function Boolean (value) {
    return @ToBoolean(value);
  }
  \\],
  88: [\\
  function Boolean (value) {
    return @BoolObj(value);
  }
  \\],
  89: [\\
  function () {
  }
  \\],
  90: [\\
  function toString (radix) {
    // The toString function is not generic; it throws a TypeError exception if its this value is not a Number or a Number object.
    if (!@SameValue(typeof this,'number') && !@SameValue(@Class(this), 'Number')){
      throw new TypeError();
    }
    // If radix not present or is undefined the Number 10 is used as the value of radix.
    if (arguments.length === 0 || @SameValue(radix,undefined)){
      var radix = 10;
    }
    else {
      radix = @ToInteger(radix);
    }
    // If ToInteger(radix) is the Number 10 then this Number value is given as an argument to the ToString abstract operation; the resulting String value is returned.
    if (radix === 10) {
      return @ToString(this);
    }
    // If ToInteger(radix) is not an integer between 2 and 36 inclusive throw a RangeError exception.
    else if (radix < 2 || radix > 36){
      throw new RangeError();
    }
    // If ToInteger(radix) is an integer from 2 to 36, but not 10, the result is a String representation of this Number value using the specified radix. Letters a-z are used for digits with values 10 through 35. The precise algorithm is implementation-dependent if the radix is not 10, however the algorithm should be a generalisation of that specified in 9.8.1.
    else if (radix >= 2 && radix <= 36) {
      var S = "";
      var n = this;
      var alpha = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
      while (n > 0){
        if(n%radix >= 10){
          S = alpha[n%radix - 10] + S;
        }else {
          S = @ToString(n%radix) + S;
        }
        n = @floor(n / radix);
      }
      return S;
    }
  }
  \\],
  91: [\\
  function toLocaleString () {
    if (!@SameValue(typeof this,'number') && !@SameValue(@Class(this), 'Number')){
      throw new TypeError();
    }
    return @ToString(this);
  }
  \\],
  92: [\\
  function valueOf () {
    // The valueOf function is not generic; it throws a TypeError exception if its this value is not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.
    if (typeof this === "number") return this;
    else if (typeof this === "object" && this !== null && @Class(this) === "Number") return @PrimitiveValue(this);
    else throw new TypeError();
  }
  \\],
  93: [\\
  function toFixed (fractionDigits){
    // 1. Let f be ToInteger(fractionDigits). (If fractionDigits is undefined, this step produces the value 0).
    var f = @ToInteger(fractionDigits);
    // 2. If f < 0 or f > 20, throw a RangeError exception.
    if (f < 0 || f > 20) {
      throw new RangeError();
    }
    // 3. Let x be this Number value.
    var x = this;
    // 4. If x is NaN, return the String "NaN".
    if (@SameValue(x,NaN)) {
      return "NaN";
    }
    // 5. Let s be the empty String.
    var s = "";
    // 6. Ifx<0,then
    if ( x < 0) {
      // a. Let s be "-".
      var s = "-";
      // b. Letx=–x.
      x = -x;
    }
    // 7. If x >= 10^21, then
    if (x >= 10e+21) {
      // a. Let m = ToString(x).
      var m = @ToString(x);
    }
    // 8. Else, x < 10^21
    else {
      // a. Let n be an integer for which the exact mathematical value of n/10^f – x is as close to zero as possible. If there are two such n, pick the larger n.
      var diff = Infinity;
      var pre_diff = Infinity;
      var n = 0;
      do{
        pre_diff = diff;
        diff = @abs(n / (@pow(10,f)) - x);
        n += 1;
      }while(diff < pre_diff);
      n -= 2;
      // b. If n = 0, let m be the String "0". Otherwise, let m be the String consisting of the digits of the decimal representation of n (in order, with no leading zeroes).
      if (n === 0) {
        var m = "0";
      }else {
        var m = @ToString(n);
      }
      // c. If f!=0,then
      if (f != 0) {
        // i. Let k be the number of characters in m.
        var k = m.length;
        // ii. If k ≤ f, then
        if ( k <= f) {
          // 1. Let z be the String consisting of f+1–k occurrences of the character  ̳0‘.
          var z = "";
          for ( var i = 0; i < f + 1 - k; i++) {
            z = z + "0";
          }
          // 2. Let m be the concatenation of Strings z and m.
          var m = z + m;
          // 3. Letk=f+1.
          var k = f + 1;
        }
        // iii. Let a be the first k–f characters of m, and let b be the remaining f characters of m.
        var a = m.slice(0,k-f);
        var b = m.slice(k-f);
        // iv. Let m be the concatenation of the three Strings a, ".", and b.
        var m = a + "." + b;
      }
    }
    // 9. Return the concatenation of the Strings s and m.
    return s + m;
  }
  \\],
  94: [\\
  function toExponential (fractionDigits) {
    // 1. Let x be this Number value.
    var x = this;
    // 2. Let f be ToInteger(fractionDigits).
    var f = @ToInteger(fractionDigits);
    // 3. If x is NaN, return the String "NaN".
    if (@SameValue(x,NaN)) {
      return "NaN"
    }
    // 4. Let s be the empty String.
    var s = "";
    // 5. Ifx<0,then
    if (x < 0) {
      // a. Let s be "-".
      var s = "-";
      // b. Letx=–x.
      x = -x;
    }
    // 6. Ifx=Infinity,then
    if (@SameValue(x,Infinity)) {
      // a. Return the concatenation of the Strings s and "Infinity".
      return s + "Infinity";
    }
    // 7. If fractionDigits is not undefined and (f < 0 or f > 20), throw a RangeError exception.
    if ((!@SameValue(fractionDigits,undefined)) && (f < 0 || f > 20)) {
      throw new RangeError();
    }
    // 8. Ifx=0,then
    if (x === 0) {
      // a. Letf=0.
      var f = 0;
      // b. Let m be the String consisting of f+1 occurrences of the character  ̳0‘.
      m = "";
      for (var i = 0; i < f+1; i++) {
        m += "0";
      }
      // c. Lete=0.
      var e = 0;
    }
    // 9. Else,x!=0
    else {
      // a. If fractionDigits is not undefined, then
      if (!@SameValue(fractionDigits,undefined)) {
        // i. Let e and n be integers such that 10f   n < 10f+1 and for which the exact mathematical value of n 10e–f –x is as close to zero as possible. If there are two such sets of e and n, pick the e and n for which n   10e–f is larger.
        x_num = @ToString(x);
        // Get e
        if (x_num[0] === "0"){
          var i = 2;
          while (x_num[i] === "0") {
            i += 1;
          }
          var e = -i + 1;
        }
        else {
          var i = 0;
          while (x_num[i] !== ".") {
            i += 1;
          }
          e = i - 1;
        }
        // Get n
        var diff = Infinity;
        var pre_diff = Infinity;
        var n = @pow(10,f);
        do{
          pre_diff = diff;
          diff = @abs(n * (@pow(10,e-f)) - x);
          n += 1;
        }while((diff < pre_diff) && (n < @pow(10,f+1)));
        n -= 2;
      }
      // b. Else, fractionDigits is undefined
      else {
        // i. Lete,n,andfbeintegerssuchthatf 0,10f  n<10f+1,thenumbervalueforn 10e–f is x,and f is as small as possible. Note that the decimal representation of n has f+1 digits, n is not divisible by 10, and the least significant digit of n is not necessarily uniquely determined by these criteria.
        x_num = @ToString(x);
        // Get f
        if (x_num[0] === 0) {
          var i = 2;
          while (x_num[i] === "0") {
            i += 1;
          }
          f = x_num.length - i - 1;
        }else {
          f = x_num.length - 2;
        }
        // Get e
        if (x_num[0] === "0"){
          var i = 2;
          while (x_num[i] === "0") {
            i += 1;
          }
          var e = -i + 1;
        }
        else {
          var i = 0;
          while (x_num[i] !== ".") {
            i += 1;
          }
          e = i - 1;
        }
        // Get n
        var diff = Infinity;
        var pre_diff = Infinity;
        var n = @pow(10,f);
        do{
          pre_diff = diff;
          diff = @abs(n * (@pow(10,e-f)) - x);
          n += 1;
        }while((diff < pre_diff) && (n < @pow(10,f+1)));
        n -= 2;
      }
      // c. Let m be the String consisting of the digits of the decimal representation of n (in order, with no leading zeroes).
      var m = @ToString(n);
    }
    // 10. If f!=0,then
    if (f != 0) {
      // a. Let a be the first character of m, and let b be the remaining f characters of m.
      var a = m.slice(0,1);
      var b = m.slice(1);
      // b. Let m be the concatenation of the three Strings a, ".", and b.
      m = a + "." + b;
    }
    // 11. Ife=0,then
    if (e === 0) {
      // a. Letc="+".
      var c = "+";
      // b. Letd="0".
      var d = 0;
    }
    // 12. Else
    else {
      // a. Ife>0,thenletc="+".
      if (e > 0) {
        var c = "+";
      }
      // b. Else,e≤0
      else {
        // i. Let c = "-".
        c = "-";
        // ii. Let e = –e.
        e = -e;
      }
      // c. Let d be the String consisting of the digits of the decimal representation of e (in order, with no leading zeroes).
      d = @ToString(e);
    }
    // 13. Let m be the concatenation of the four Strings m, "e", c, and d.
    var m = m + "e" + c + d;
    // 14. Return the concatenation of the Strings s and m.
    return m;
  }
  \\],
  95: [\\
  function toPrecision (precision) {
    // 1. Let x be this Number value.
    var x = this;
    // 2. If precision is undefined, return ToString(x).
    if (@SameValue(precision,undefined)) {
      return @ToString(x);
    }
    // 3. Let p be ToInteger(precision).
    var p = @ToInteger(precision);
    // 4. If x is NaN, return the String "NaN".
    if (@SameValue(NaN,x)) {
      return "NaN";
    }
    // 5. Let s be the empty String.
    var s = "";
    // 6. Ifx<0,then
    if (x < 0) {
      // a. Let s be "-".
      var s = "-";
      // b. Letx=–x.
      x = -x;
    }
    // 7. Ifx=+Infinity ,then
    if (@SameValue(x,Infinity)) {
      // a. Return the concatenation of the Strings s and "Infinity".
      return s + "Infinity";
    }
    // 8. If p < 1 or p > 21, throw a RangeError exception.
    if (p < 1 || p > 21) {
      throw new RangeError();
    }
    // 9. Ifx=0,then
    if (x === 0) {
      // a. Let m be the String consisting of p occurrences of the character  ̳0‘.
      var m = "";
      for (var i = 0; i < p; i++) {
        m += "0";
      }
      // b. Lete=0.
      var e = 0
    }
    //10. Else x !=  0,
    else {
      //a. Let e and n be integers such that 10p–1   n < 10p and for which the exact mathematical value of n   10e–p+1 – x is as close to zero as possible. If there are two such sets of e and n, pick the e and n for which n   10e–p+1 is larger.
      // Get e
      if (x_num[0] === "0"){
        var i = 2;
        while (x_num[i] === "0") {
          i += 1
        }
        var e = -i + 1;
      }
      else {
        var i = 0;
        while (x_num[i] !== ".") {
          i += 1;
        }
        e = i - 1;
      }
      // Get n
      var diff = Infinity;
      var pre_diff = Infinity;
      var n = @pow(10,p-1);
      do{
        pre_diff = diff;
        diff = @abs(n * (@pow(10,e-p+1)) - x);
        n += 1;
      }while((diff < pre_diff) && (n < @pow(10,p)))
      n -= 2;
      // b. Let m be the String consisting of the digits of the decimal representation of n (in order, with no leading zeroes).
      var m = @ToString(n);
      // c. Ife < –6 or e>= p,then
      if (e < -6 || e >= p) {
        // i. Let a be the first character of m, and let b be the remaining p–1 characters of m.
        var a = m[0];
        var b = m.slice(1);
        // ii. Let m be the concatenation of the three Strings a, ".", and b.
        m = a + "." + b;
        // iii. If e = 0, then
        if (e === 0) {
          // 1. Let c ="+"and d ="0".
          var c = "+";
          var d = "0";
        }
        //iv. Else e!= 0,
        else {
          // 1. Ife>0, then
          if (e > 0) {
            // a Let c = "+".
            var c = "+";
          }
          // 2. Elsee<0,
          else {
            // a Let c = "-".
            var c = "-";
            // b Let e = –e.
            e = -e;
          }
          // 3. Let d be the String consisting of the digits of the decimal representation of e (in order, with no leading zeroes).
          var d = @ToString(e);
        }
      // v. Let m be the concatenation of the five Strings s, m, "e", c, and d.
      var m = s + m + "e" + c + d;
      }
    }
    // 11. If e = p–1, then return the concatenation of the Strings s and m.
    if (e === p-1) {
      return s + m;
    }
    // 12. If e>= 0,then
    if (e >= 0) {
      // a. Let m be the concatenation of the first e+1 characters of m, the character  ̳.‘, and the remaining p– (e+1) characters of m.
      var m = m.slice(0,e+1) + "." + m.slice(e+1,p);
    }
    // 13. Else e < 0,
    else {
      // a. Let m be the concatenation of the String "0.", –(e+1) occurrences of the character  ̳0‘, and the String m.
      var m = "0.";
      for (var i = 0; i < -(e+1); i++) {
        m += "0";
      }
    }
    // 14. Return the concatenation of the Strings s and m.
    return s + m;
  }
  \\],
  96: [\\
  function Number (value) {
    if(arguments.length === 0){
      return +0;
    }else{
      return @ToNumber(value);
    }
  }
  \\],
  97: [\\
  function Number (value) {
    if (arguments.length === 0) {
      return @NumObj(+0);
    } else {
      return @NumObj(value);
    }
  }
  \\],
  98: [\\
  function () {
  }
  \\],
  99: [\\
  function toString () {
    // This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the Date in the current time zone in a convenient, human-readable form.
    return @ToString(this);
  }
  \\],
  100: [\\
  function toDateString () {
    // This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the ―date‖ portion of the Date in the current time zone in a convenient, human-readable form.
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(0,i);
  }
  \\],
  101: [\\
  function toTimeString () {
    // This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the ―time‖ portion of the Date in the current time zone in a convenient, human-readable form.
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(i);
  }
  \\],
  102: [\\
  function toLocaleString () {
    return @ToString(this);
  }
  \\],
  103: [\\
  function toLocaleDateString() {
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(0,i);
  }
  \\],
  104: [\\
  function toLocaleTimeString () {
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(i);
  }
  \\],
  105: [\\
  function valueOf () {
    // The valueOf function returns a Number, which is this time value.
    return @PrimitiveValue(this);
  }
  \\],
  106: [\\
  function getTime () {
    // 1. Return this time value.
    return @PrimitiveValue(this);
  }
  \\],
  107: [\\
  function getFullYear () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  108: [\\
  function getUTCFullYear () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return YearFromTime(t).
    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;
    return YearFromTime_t;
  }
  \\],
  109: [\\
  function getMonth() {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  110: [\\
  function getUTCMonth () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return MonthFromTime(t).
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var DayWithinYear_t = Day_t - DayFromYear_y

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    if (y % 4 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 4 === 0 && y % 100 !== 0) {
      var DaysInYear_y = 366;
    }else if (y % 100 === 0 && y % 400 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 400 === 0) {
      var DaysInYear_y = 366;
    }

    if (DaysInYear_y === 365) {
      var InLeapYear_t = 0;
    }else {
      var InLeapYear_t = 1;
    }

    if (0 <= DayWithinYear_t < 31) {
      var MonthFromTime_t = 0;
    }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
      var MonthFromTime_t = 1;
    }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
      var MonthFromTime_t = 2;
    }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
      var MonthFromTime_t = 3;
    }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
      var MonthFromTime_t = 4;
    }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
      var MonthFromTime_t = 5;
    }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
      var MonthFromTime_t = 6;
    }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
      var MonthFromTime_t = 7;
    }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
      var MonthFromTime_t = 8;
    }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
      var MonthFromTime_t = 9;
    }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
      var MonthFromTime_t = 10;
    }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
      var MonthFromTime_t = 11;
    }
    return MonthFromTime_t;
  }
  \\],
  111: [\\
  function getDate () {
    // Need LocalTime(t);
    return @NumTop;
  }
  \\],
  112: [\\
  function getUTCDate () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return DateFromTime(t).

    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var DayWithinYear_t = Day_t - DayFromYear_y

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    if (y % 4 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 4 === 0 && y % 100 !== 0) {
      var DaysInYear_y = 366;
    }else if (y % 100 === 0 && y % 400 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 400 === 0) {
      var DaysInYear_y = 366;
    }

    if (DaysInYear_y === 365) {
      var InLeapYear_t = 0;
    }else {
      var InLeapYear_t = 1;
    }

    if (0 <= DayWithinYear_t < 31) {
      var MonthFromTime_t = 0;
    }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
      var MonthFromTime_t = 1;
    }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
      var MonthFromTime_t = 2;
    }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
      var MonthFromTime_t = 3;
    }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
      var MonthFromTime_t = 4;
    }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
      var MonthFromTime_t = 5;
    }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
      var MonthFromTime_t = 6;
    }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
      var MonthFromTime_t = 7;
    }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
      var MonthFromTime_t = 8;
    }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
      var MonthFromTime_t = 9;
    }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
      var MonthFromTime_t = 10;
    }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
      var MonthFromTime_t = 11;
    }

    if (MonthFromTime_t === 0) {
      var DateFromTime = DayWithinYear_t + 1;
    }else if (MonthFromTime_t === 1) {
      var DateFromTime = DayWithinYear_t - 30;
    }else if (MonthFromTime_t === 2) {
      var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
    }else if (MonthFromTime_t === 3) {
      var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
    }else if (MonthFromTime_t === 4) {
      var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
    }else if (MonthFromTime_t === 5) {
      var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
    }else if (MonthFromTime_t === 6) {
      var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
    }else if (MonthFromTime_t === 7) {
      var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
    }else if (MonthFromTime_t === 8) {
      var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
    }else if (MonthFromTime_t === 9) {
      var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
    }else if (MonthFromTime_t === 10) {
      var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
    }else if (MonthFromTime_t === 11) {
      var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
    }
    return DateFromTime;
  }
  \\],
  113: [\\
  function getDay () {
    // Need Localtime(t);
    return @NumTop;
  }
  \\],
  114: [\\
  function getUTCDay () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return WeekDay(t).
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var WeekDay_t = (Day_t + 4) % 7;
    return WeekDay_t;
  }
  \\],
  115: [\\
  function getHours () {
    // Need Local(t)
    return @NumTop;
  }
  \\],
  116: [\\
  function getUTCHours () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return HourFromTime(t).
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    return HourFromTime_t;
  }
  \\],
  117: [\\
  function getMinutes () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  118: [\\
  function getUTCMinutes () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return MinFromTime(t).
    var MinutesPerHour = 60;
    var msPerMinute = 60000;
    var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
    return MinFromTime_t;
  }
  \\],
  119: [\\
  function getSeconds () {
    // Need LocalTime(t);
    return @NumTop;
  }
  \\],
  120: [\\
  function getUTCSeconds () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return SecFromTime(t).
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
    return SecFromTime_t;
  }
  \\],
  121: [\\
  function getMilliseconds () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  122: [\\
  function getUTCMilliseconds () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return msFromTime(t).
    var msPerSecond = 1000;
    var msFromTime_t = t % msPerSecond;
    return msFromTime_t;
  }
  \\],
  123: [\\
  function getTimezoneOffset () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  124: [\\
  function setTime (time) {
    // 1. Let v be TimeClip(ToNumber(time)).
    var time = @ToNumber(time);
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    //  2. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 3. Return v.
    return v;
  }
  \\],
  125: [\\
  function setMilliseconds (ms) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  126: [\\
  function setUTCMilliseconds (ms) {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ToNumber(ms)).
    var arg1;
    var arg2;
    var arg3;
    var arg4;
    // HourFromTime(t)
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    arg1 = HourFromTime_t;
    // MinFromTime(t)
    var MinutesPerHour = 60;
    var msPerMinute = 60000;
    var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
    arg2 = MinFromTime_t;
    // SecFromTime(t)
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
    arg3 = SecFromTime_t;
    arg4 = @ToNumber(ms);
    // MakeTime
    var hour = arg1;
    var min = arg2;
    var sec = arg3;
    var ms = arg4;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;

    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    var time = return_val;
    // 3. Let v be TimeClip(MakeDate(Day(t), time)).
    var arg1;
    var arg2 = time;
    var arg3;
    // Day(t)
    var t = @PrimitiveValue(this);
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg1 = Day_t;
    // MakeDate
    var day = arg1;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    arg3 = return_val;
    // TimeClip
    var time = arg3;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      var v = return_val;
    }
    // 4. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 5. Return v.
    return v;
  }
  \\],
  127: [\\
  function setSeconds (sec,ms) {
    // Need LocalTime(t);
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  128: [\\
  function setUTCSeconds (set,ms) {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let s be ToNumber(sec).
    var s = @ToNumber(sec);
    // 3. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
    if (!(arguments.length > 1)) {
      var msPerSecond = 1000;
      var msFromTime_t = t % msPerSecond;
      var milli = msFromTime_t;
    }else {
      var milli = @ToNumber(ms);
    }
    // 4. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).
    var arg1;
    var arg2;
    var arg3;
    var arg4;
    // HourFromTime(t)
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    arg1 = HourFromTime_t;
    // MinFromTime(t);
    var MinutesPerHour = 60;
    var msPerMinute = 60000;
    var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
    arg2 = MinFromTime_t;
    // Day(t)
    msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg3 = Day_t;
    // MakeTime
    var hour = arg1;
    var min = arg2;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;

    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg4 = return_val;
    // MakeDate(t)
    var day = arg3;
    var time = arg4;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var date = return_val;
    // 5. Let v be TimeClip(date).
    var time = date;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if(@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    // 6. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 7. Return v.
    return v;
  }
  \\],
  129: [\\
  function setMinutes (min,sec,ms) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  130: [\\
  function setUTCMinutes (min,sec,ms) {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    //2. Let m be ToNumber(min).
    var m = @ToNumber(min);
    // 3. If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
    if (!(arguments.length > 1)) {
      var SecondsPerMinute= 60;
      var msPerSecond = 1000;
      var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
      var sec = SecFromTime_t;
    }else {
      var s = @ToNumber(sec);
    }
    // 4. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
    if (!(arguments.length > 2)) {
      var msPerSecond = 1000;
      var msFromTime_t = t % msPerSecond;
      var milli = msFromTime_t;
    }else {
      var milli = @ToNumber(ms);
    }
    // 5. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).
    var arg1;
    var arg2;
    var arg3;
    // HourFromTime(t)
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    arg1 = HourFromTime_t;
    // Day(t)
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg2 = Day_t;
    // MakeTime
    var hour = arg1;
    var min = m;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;


    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var mlli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg3 = return_val;
    // MakeDate
    var day = arg2;
    var time = arg3;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
    return_val = day * msPerDay + time;
    }
    var date = return_val;
    // 6. Let v be TimeClip(date).
    // TimeClip
    var time = date;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    // 7. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    //8. Return v.
    return v;
  }
  \\],
  131: [\\
  function setHours (hour,min,sec,ms) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  132: [\\
  function setUTCHours (hour,min,sec,ms) {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let h be ToNumber(hour).
    var h = @ToNumber(hour);
    // 3. If min is not specified, then let m be MinFromTime(t); otherwise, let m be ToNumber(min).
    if (!(arguments.length > 1)) {
      var MinutesPerHour = 60;
      var msPerMinute = 60000;
      var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
      var m = MinFromTime_t;
    }else {
      var m = @ToNumber(min);
    }
    // 4. If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
    if (!(arguments.length > 2)) {
      var SecondsPerMinute= 60;
      var msPerSecond = 1000;
      var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
      var s = SecFromTime_t;
    }else {
      var s = @ToNumber(sec);
    }
    // 5. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
    if (!(arguments.length > 3)) {
      var msPerSecond = 1000;
      var msFromTime_t = t % msPerSecond;
      var ms = msFromTime_t;
    }else {
      var milli = @ToNumber(ms);
    }
    // 6. Let newDate be MakeDate(Day(t), MakeTime(h, m, s, milli)).
    var arg1;
    var arg2;
    // Day(t)
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg1 = Day_t;
    // MakeTime
    var hour = h;
    var min = m;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;


    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg2 = return_val;
    // MakeDate
    var day = arg1;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 7. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    // 8. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 9. Return v.
    return v;
  }
  \\],
  133: [\\
  function setDate (date) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  134: [\\
  function setUTCDate (date) {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let dt be ToNumber(date).
    var dt = @ToNumber(date);
    // 3. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).
    var arg1;
    var arg2;
    var arg3;
    var arg4;
    // YearFromTime(t);
    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;
    arg1 = YearFromTime_t;
    // MonthFromTime(t)
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var DayWithinYear_t = Day_t - DayFromYear_y

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    if (y % 4 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 4 === 0 && y % 100 !== 0) {
      var DaysInYear_y = 366;
    }else if (y % 100 === 0 && y % 400 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 400 === 0) {
      var DaysInYear_y = 366;
    }

    if (DaysInYear_y === 365) {
      var InLeapYear_t = 0;
    }else {
      var InLeapYear_t = 1;
    }

    if (0 <= DayWithinYear_t < 31) {
      var MonthFromTime_t = 0;
    }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
      var MonthFromTime_t = 1;
    }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
      var MonthFromTime_t = 2;
    }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
      var MonthFromTime_t = 3;
    }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
      var MonthFromTime_t = 4;
    }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
      var MonthFromTime_t = 5;
    }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
      var MonthFromTime_t = 6;
    }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
      var MonthFromTime_t = 7;
    }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
      var MonthFromTime_t = 8;
    }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
      var MonthFromTime_t = 9;
    }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
      var MonthFromTime_t = 10;
    }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
      var MonthFromTime_t = 11;
    }
    arg2 = MonthFromTime_t;
    // TimeWithinDay(t)
    var msPerDay = 86400000;
    var TimeWithinDay_t = t % msPerDay;
    arg3 = TimeWithinDay_t;
    // MakeDay
    var year = arg1;
    var month = arg2;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg4 = return_val;
    // Makedate
    var day = arg4;
    var time = arg3;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 4. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    // 5. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 6. Return v.
    return v;
  }
  \\],
  135: [\\
  function setMonth (month,date) {
    // Need LocalTime(t);
    @PrimitiveValue(this ,@NumTop);
    return @NumTop;
  }
  \\],
  136: [\\
  function setUTCMonth (month,date) {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let m be ToNumber(month).
    var m = @ToNumber(month);
    // 3. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
    if (!(arguments.length > 1)) {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var DayWithinYear_t = Day_t - DayFromYear_y

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var msPerDay = 86400000;
      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      if (y % 4 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 4 === 0 && y % 100 !== 0) {
        var DaysInYear_y = 366;
      }else if (y % 100 === 0 && y % 400 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 400 === 0) {
        var DaysInYear_y = 366;
      }

      if (DaysInYear_y === 365) {
        var InLeapYear_t = 0;
      }else {
        var InLeapYear_t = 1;
      }

      if (0 <= DayWithinYear_t < 31) {
        var MonthFromTime_t = 0;
      }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
        var MonthFromTime_t = 1;
      }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
        var MonthFromTime_t = 2;
      }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
        var MonthFromTime_t = 3;
      }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
        var MonthFromTime_t = 4;
      }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
        var MonthFromTime_t = 5;
      }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
        var MonthFromTime_t = 6;
      }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
        var MonthFromTime_t = 7;
      }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
        var MonthFromTime_t = 8;
      }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
        var MonthFromTime_t = 9;
      }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
        var MonthFromTime_t = 10;
      }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
        var MonthFromTime_t = 11;
      }

      if (MonthFromTime_t === 0) {
        var DateFromTime = DayWithinYear_t + 1;
      }else if (MonthFromTime_t === 1) {
        var DateFromTime = DayWithinYear_t - 30;
      }else if (MonthFromTime_t === 2) {
        var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
      }else if (MonthFromTime_t === 3) {
        var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
      }else if (MonthFromTime_t === 4) {
        var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
      }else if (MonthFromTime_t === 5) {
        var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
      }else if (MonthFromTime_t === 6) {
        var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
      }else if (MonthFromTime_t === 7) {
        var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
      }else if (MonthFromTime_t === 8) {
        var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
      }else if (MonthFromTime_t === 9) {
        var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
      }else if (MonthFromTime_t === 10) {
        var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
      }else if (MonthFromTime_t === 11) {
        var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
      }
      var dt = DateFromTime;
    }else {
      @ToNumber(date);
    }
    // 4. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).
    var arg1;
    var arg2;
    var arg3;
    // YearFromTime(t)
    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;
    arg1 = YearFromTime_t;
    // TimeWithinDay(t)
    var msPerDay = 86400000;
    var TimeWithinDay_t = t % msPerDay;
    arg2 = TimeWithinDay_t;
    // MakeDay
    var year = arg1;
    var month = m;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }
      else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg3 = return_val;
    // MakeDate
    var day = arg3;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 5. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    // 6. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 7. Return v.
    return v;
  }
  \\],
  137: [\\
  function setFullYear (year,month,date) {
    // Need LocalTime(t);
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  138: [\\
  function setUTCFullYear (year,month,date) {
    // 1. Let t be this time value; but if this time value is NaN, let t be +0.
    var t = @PrimitiveValue(this);
    if (@SameValue(t,NaN)) {
      var t = 0;
    }
    // 2. Let y be ToNumber(year).
    var y = @ToNumber(year);
    // 3. If month is not specified, then let m be MonthFromTime(t); otherwise, let m be ToNumber(month).
    if (!(arguments.length > 1)) {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var DayWithinYear_t = Day_t - DayFromYear_y

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var msPerDay = 86400000;
      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      if (y % 4 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 4 === 0 && y % 100 !== 0) {
        var DaysInYear_y = 366;
      }else if (y % 100 === 0 && y % 400 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 400 === 0) {
        var DaysInYear_y = 366;
      }

      if (DaysInYear_y === 365) {
        var InLeapYear_t = 0;
      }else {
        var InLeapYear_t = 1;
      }

      if (0 <= DayWithinYear_t < 31) {
        var MonthFromTime_t = 0;
      }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
        var MonthFromTime_t = 1;
      }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
        var MonthFromTime_t = 2;
      }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
        var MonthFromTime_t = 3;
      }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
        var MonthFromTime_t = 4;
      }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
        var MonthFromTime_t = 5;
      }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
        var MonthFromTime_t = 6;
      }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
        var MonthFromTime_t = 7;
      }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
        var MonthFromTime_t = 8;
      }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
        var MonthFromTime_t = 9;
      }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
        var MonthFromTime_t = 10;
      }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
        var MonthFromTime_t = 11;
      }
      var m = MonthFromTime_t;
    }else {
      var m = @ToNumber(m);
    }
    // 4. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
    if (!(arguments.length > 0)) {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var DayWithinYear_t = Day_t - DayFromYear_y

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var msPerDay = 86400000;
      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      if (y % 4 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 4 === 0 && y % 100 !== 0) {
        var DaysInYear_y = 366;
      }else if (y % 100 === 0 && y % 400 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 400 === 0) {
        var DaysInYear_y = 366;
      }

      if (DaysInYear_y === 365) {
        var InLeapYear_t = 0;
      }else {
        var InLeapYear_t = 1;
      }

      if (0 <= DayWithinYear_t < 31) {
        var MonthFromTime_t = 0;
      }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
        var MonthFromTime_t = 1;
      }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
        var MonthFromTime_t = 2;
      }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
        var MonthFromTime_t = 3;
      }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
        var MonthFromTime_t = 4;
      }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
        var MonthFromTime_t = 5;
      }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
        var MonthFromTime_t = 6;
      }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
        var MonthFromTime_t = 7;
      }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
        var MonthFromTime_t = 8;
      }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
        var MonthFromTime_t = 9;
      }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
        var MonthFromTime_t = 10;
      }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
        var MonthFromTime_t = 11;
      }

      if (MonthFromTime_t === 0) {
        var DateFromTime = DayWithinYear_t + 1;
      }else if (MonthFromTime_t === 1) {
        var DateFromTime = DayWithinYear_t - 30;
      }else if (MonthFromTime_t === 2) {
        var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
      }else if (MonthFromTime_t === 3) {
        var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
      }else if (MonthFromTime_t === 4) {
        var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
      }else if (MonthFromTime_t === 5) {
        var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
      }else if (MonthFromTime_t === 6) {
        var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
      }else if (MonthFromTime_t === 7) {
        var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
      }else if (MonthFromTime_t === 8) {
        var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
      }else if (MonthFromTime_t === 9) {
        var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
      }else if (MonthFromTime_t === 10) {
        var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
      }else if (MonthFromTime_t === 11) {
        var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
      }
      var dt = DateFromTime;
    }else {
      var dt = @ToNumber(dt);
    }
    // 5. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).
    var arg1;
    var arg2;
    // TimeWithinDay(t)
    var msPerDay = 86400000;
    var TimeWithinDay_t = t % msPerDay;
    arg1 = TimeWithinDay_t;
    // MakeDay
    var year = y;
    var month = m;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }
      else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg2 = return_val;
    // MakeDate
    var day = arg2;
    var time = arg1;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 6. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    // 7. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 8. Return v.
    return v;
  }
  \\],
  139: [\\
  function toUTCString () {
    // Need to know internal structure of Date object
    return @StrTop;
  }
  \\],
  140: [\\
  function toISOString () {
    // Need to know internal structure of Date object
    var t = @PrimitiveValue(this);
    if (@SameValue(t,Infinity) || @SameValue(t,-Infinity) || @SameValue(t,NaN)) {
      throw new RangeError();
    }
    return @StrTop;
  }
  \\],
  141: [\\
  function () {
  }
  \\],
  142: [\\
  function Date (year,month,date,hours,minutes,seconds,ms) {
    // All of the arguments are optional; any arguments supplied are accepted but are completely ignored. A String is created and returned as if by the expression (new Date()).toString()
    return (new Date()).toString();
  }
  \\],
  143: [\\
  function Date () {
    if (arguments.length === 0) {
      var obj = {};
      @Prototype(obj, Date.prototype);
      @Class(obj, "Date");
      @Extensible(obj, true);
      @PrimitiveValue(obj, @NumTop);
      return obj;
    }else if (arguments.length === 1) {
      var value = arguments[0];
      // 1. Let v be ToPrimitive(value).
      var v = @ToPrimitive(value);
      // 2. If Type(v) is String, then
      if (@SameValue(typeof v,"string")) {
        // a. Parse v as a date, in exactly the same manner as for the parse method (15.9.4.2); let V be the time value for this date.
        var V = Date.parse(v)
      }
      // 3. Else, let V be ToNumber(v).
      else {
        var V = @ToNumber(v);
      }
      // 4. Set the [[PrimitiveValue]] internal property of the newly constructed object to TimeClip(V) and return.
      var time = V;
      var return_val;
      if (time === Infinity) {
        return_val = NaN;
      }
      else if (@abs(time) > 8.64e+15) {
        return_val = NaN;
      }else {
        return_val = @ToInteger(time);
      }
      var obj = {};
      @Prototype(obj, Date.prototype);
      @Class(obj, "Date");
      @Extensible(obj, true);
      @PrimitiveValue(obj, return_val);
      return obj;
    }else if (arguments.length > 1) {
      var year = arguments[0];
      var month = arguments[1];
      // 1. Let y be ToNumber(year).
      var y = @ToNumber(year);
      // 2. Let m be ToNumber(month).
      var m = @ToNumber(month);
      // 3. If date is supplied then let dt be ToNumber(date); else let dt be 1.
      if (arguments.length > 2) {
        var dt = @ToNumber(arguments[2]);
      }else {
        var dt = 1;
      }
      // 4. If hours is supplied then let h be ToNumber(hours); else let h be 0.
      if (arguments.length > 3) {
        var h = @ToNumber(arguments[3]);
      }else {
        var h = 0;
      }
      // 5. If minutes is supplied then let min be ToNumber(minutes); else let min be 0.
      if (arguments.length > 4) {
        var min = @ToNumber(arguments[4]);
      }else {
        var min = 0;
      }
      // 6. If seconds is supplied then let s be ToNumber(seconds); else let s be 0.
      if (arguments.length > 5) {
        var s = @ToNumber(arguments[5]);
      }else {
        var s = 0;
      }
      // 7. If ms is supplied then let milli be ToNumber(ms); else let milli be 0.
      if (arguments.length > 6) {
        var milli = @ToNumber(arguments[6]);
      }else {
        milli = 0;
      }
      // 8. If y is not NaN and 0   ToInteger(y)   99, then let yr be 1900+ToInteger(y); otherwise, let yr be y.
      if (!@SameValue(y,NaN) && (0 <= @ToInteger(y) && @ToInteger(y) <= 99)) {
        var yr = 1900 + @ToInteger(t);
      }else {
        var yr = y;
      }
      // 9. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).
      var arg1;
      var arg2;
      // MakeDay
      var year = yr;
      var month = m;
      var date = dt;
      var return_val;
      if (year === Infinity || month === Infinity || date === Infinity) {
        return_val = NaN;
      }else {
        var y = @ToInteger(year);
        var m = @ToInteger(month);
        var dt = @ToInteger(date);
        var ym = y + @floor(m/12);
        var mn = m % 12;
        var t = 0;
        while (t < 8.64e+15) {
          // YearFromTime(t)
          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;
          if (YearFromTime_t === ym) {
            // MonthFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var msPerDay = 86400000;
            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            if (y % 4 !== 0) {
              var DaysInYear_y = 365;
            }else if (y % 4 === 0 && y % 100 !== 0) {
              var DaysInYear_y = 366;
            }else if (y % 100 === 0 && y % 400 !== 0) {
              var DaysInYear_y = 365;
            }else if (y % 400 === 0) {
              var DaysInYear_y = 366;
            }

            if (DaysInYear_y === 365) {
              var InLeapYear_t = 0;
            }else {
              var InLeapYear_t = 1;
            }

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }
            if (MonthFromTime_t === mn) {
              // DateFromTime(t)
              var msPerDay = 86400000;
              var Day_t = @floor(t/msPerDay);

              var y = 0;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;

              while (TimeFromYear_y <= t) {
                y += 1;
                var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

                var TimeFromYear_y = msPerDay * DayFromYear_y;
              }
              y -= 1;
              var YearFromTime_t = y;

              var y = YearFromTime_t;

              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var DayWithinYear_t = Day_t - DayFromYear_y

              if (0 <= DayWithinYear_t < 31) {
                var MonthFromTime_t = 0;
              }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
                var MonthFromTime_t = 1;
              }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
                var MonthFromTime_t = 2;
              }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
                var MonthFromTime_t = 3;
              }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
                var MonthFromTime_t = 4;
              }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
                var MonthFromTime_t = 5;
              }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
                var MonthFromTime_t = 6;
              }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
                var MonthFromTime_t = 7;
              }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
                var MonthFromTime_t = 8;
              }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
                var MonthFromTime_t = 9;
              }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
                var MonthFromTime_t = 10;
              }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
                var MonthFromTime_t = 11;
              }

              if (MonthFromTime_t === 0) {
                var DateFromTime = DayWithinYear_t + 1;
              }else if (MonthFromTime_t === 1) {
                var DateFromTime = DayWithinYear_t - 30;
              }else if (MonthFromTime_t === 2) {
                var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
              }else if (MonthFromTime_t === 3) {
                var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
              }else if (MonthFromTime_t === 4) {
                var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
              }else if (MonthFromTime_t === 5) {
                var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
              }else if (MonthFromTime_t === 6) {
                var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
              }else if (MonthFromTime_t === 7) {
                var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
              }else if (MonthFromTime_t === 8) {
                var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
              }else if (MonthFromTime_t === 9) {
                var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
              }else if (MonthFromTime_t === 10) {
                var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
              }else if (MonthFromTime_t === 11) {
                var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
              }
              if (DateFromTime === 1){
                break;
              }
            }
          }
          t += 1;
        }
        if (t === 8.64e+15) {
          return_val = NaN;
        }
        else {
        var msPerDay = 86400000;
        var Day_t = @floor(t/msPerDay);
        return_val = Day_t + dt - 1;
        }
      }
      arg1 = return_val;
      //  MakeTime
      var hour = h;
      var sec = s;
      var ms = milli;
      var return_val;

      var HoursPerDay = 24;
      var MinutesPerHour = 60;
      var SecondsPerMinute= 60;
      var msPerSecond = 1000;
      var msPerMinute = 60000;
      var msPerHour = 3600000;


      if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
        return_val = NaN;
      }else {
        var h = @ToInteger(hour);
        var m = @ToInteger(min);
        var s = @ToInteger(sec);
        var milli = @ToInteger(ms);
        var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
        return_val = t;
      }
      arg2 = return_val;
      // MakeDate
      var day = arg1;
      var time = arg2;
      var return_val;
      var msPerDay = 86400000;
      if (day === Infinity || time === Infinity) {
        return_val = NaN;
      }else {
        return_val = day * msPerDay + time;
      }
      var finalDate = return_val;
      // 10. Set the [[PrimitiveValue]] internal property of the newly constructed object to TimeClip(UTC(finalDate)
      // TODO Need UTC(t) -> Need LocalTZA
      var time = finalDate;
      var return_val;
      if (time === Infinity || time === -Infinity || @SameValue(time,NaN)) {
        return_val = NaN;
      }else if (@abs(time) > 8.64e+15) {
        return_val = NaN;
      }else {
        return_val = @ToInteger(time);
      }
      var obj = {};
      @Prototype(obj, Date.prototype);
      @Class(obj, "Date");
      @Extensible(obj, true);
      @PrimitiveValue(obj, return_val);
      return obj;
    }
  }
  \\],
  144: [\\
  function parse () {
    // TODO
    return @NumTop;
  }
  \\],
  145: [\\
  function UTC (year,month,date,hours,minutes,seconds,ms) {
    // 1. Let y be ToNumber(year).
    var y = @ToNumber(year);
    // 2. Let m be ToNumber(month).
    var m = @ToNumber(month);
    // 3. If date is supplied then let dt be ToNumber(date); else let dt be 1.
    if (arguments.length > 2) {
      var dt = @ToNumber(date);
    }else {
      var dt = 1;
    }
    // 4. If hours is supplied then let h be ToNumber(hours); else let h be 0.
    if (arguments.length > 3) {
      var h = @ToNumber(hours);
    }else {
      var h = 0;
    }
    // 5. If minutes is supplied then let min be ToNumber(minutes); else let min be 0.
    if (arguments.length > 4) {
      var min = @ToNumber(minutes);
    }else {
      var min = 0;
    }
    // 6. If seconds is supplied then let s be ToNumber(seconds); else let s be 0.
    if (arguments.length > 5) {
      var s = @ToNumber(seconds);
    }else {
      var s = 0;
    }
    // 7. If ms is supplied then let milli be ToNumber(ms); else let milli be 0.
    if (arguments. length > 6) {
      var milli = @ToNumber(ms);
    }else {
      var milli = 0;
    }
    // 8. If y is not NaN and 0   ToInteger(y)   99, then let yr be 1900+ToInteger(y); otherwise, let yr be y.
    if (!@SameValue(y,NaN) && (0 <= @ToInteger(y) && @ToInteger(y) <= 99)) {
      var yr = 1900 + @ToInteger(y);
    }else {
      var yr = y;
    }
    // 9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).
    var arg1; // MakeDay(yr,m,dt)
    var arg2; // MakeTime(h, min, s, milli);
    var arg3; // MakeDate(arg1,arg2)
    // MakeDay(yr,m,dt);
    var year = yr;
    var month = m;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg1 = return_val;

    // MakeTime(h, min, s, milli)
    var hour = h;
    var min = min;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;

    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg2 = return_val;

    // MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))
    var day = arg1;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    arg3 = return_val;

    // TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)))
    var time = arg3;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    return return_val;
  }
  \\],
  146: [\\
  function now () {
    // TODO
    return @NumTop;
  }
  \\],
  147: [\\
  function () {
  }
  \\],
  148: [\\
  function () {
  }
  \\],
  149: [\\
  function () {
  }
  \\],
  150: [\\
  function RegExp () {
    return new RegExp();
  }
  \\],
  151: [\\
  function RegExp () {
    var obj = {};
    @Class(obj,"RegExp");
    @Prototype(obj,RegExp.prototype);
    obj.source = @StrTop;
    obj.global = @BoolTop;
    obj.ignoreCase = @BoolTop;
    obj.multiline = @BoolTop;
    obj.lastIndex = @NumTop;
    return obj;
  }
  \\],
  152: [\\
  function toString() {
    // 1. Let O be the this value.
    var O = this;
    // 2. If Type(O) is not Object, throw a TypeError exception.
    if (!@SameValue(typeof O,"object")){
      throw new TypeError();
    }
    // 3. Let name be the result of calling the [[Get]] internal method of O with argument "name".
    var name = O.name;
    // 4. If name is undefined, then let name be "Error"; else let name be ToString(name).
    if (@SameValue(name,undefined)) {
      var name = "Error";
    }else {
      var name = @ToString(name);
    }
    // 5. Let msg be the result of calling the [[Get]] internal method of O with argument "message".
    var msg = O.message;
    // 6. If msg is undefined, then let msg be the empty String; else let msg be ToString(msg).
    if (@SameValue(msg,undefined)) {
      var msg = "";
    }else {
      msg = @ToString(msg);
    }
    // 7. If name is the empty String, return msg.
    if (@SameValue(name,"")) {
      return msg;
    }
    // 8. If msg is the empty String, return name.
    if (@SameValue(msg,"")) {
      return name;
    }
    // 9. Return the result of concatenating name, ":", a single space character, and msg.
    return name + ": " + msg;
  }
  \\],
  153: [\\
  function Error (message) {
    var obj ={};
    @Prototype(obj,Error.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  154: [\\
  function Error (message) {
    var obj ={};
    @Prototype(obj,Error.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  155: [\\
  function EvalError (message) {
    var obj = {};
    @Prototype(obj,EvalError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  156: [\\
  function EvalError (message) {
    var obj = {};
    @Prototype(obj,EvalError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  157: [\\
  function RangeError (message) {
    var obj = {};
    @Prototype(obj,RangeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  158: [\\
  function RangeError (message) {
    var obj = {};
    @Prototype(obj,RangeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  159: [\\
  function ReferenceError (message) {
    var obj = {};
    @Prototype(obj,ReferenceError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  160: [\\
  function ReferenceError (message) {
    var obj = {};
    @Prototype(obj,ReferenceError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  161: [\\
  function SyntaxError (message) {
    var obj = {};
    @Prototype(obj,SyntaxError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  162: [\\
  function SyntaxError (message) {
    var obj = {};
    @Prototype(obj,SyntaxError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;

  }
  \\],
  163: [\\
  function TypeError (message) {
    var obj = {};
    @Prototype(obj,TypeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  164: [\\
  function TypeError (message) {
    var obj = {};
    @Prototype(obj,TypeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  165: [\\
  function URIError (message) {
    var obj = {};
    @Prototype(obj,URIError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  166: [\\
  function URIError (message) {
    var obj = {};
    @Prototype(obj,URIError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  167: [\\
  function abs (x) {
    return @abs(x);
  }
  \\],
  168: [\\
  function acos (x) {
    return @acos(x);
  }
  \\],
  169: [\\
  function asin (x) {
    return @asin(x);
  }
  \\],
  170: [\\
  function atan (x) {
    return @atan(x);
  }
  \\],
  171: [\\
  function atan2 (x, y) {
    return @atan2(x, y);
  }
  \\],
  172: [\\
  function ceil (x) {
    return @ceil(x);
  }
  \\],
  173: [\\
  function cos (x) {
    return @cos(x);
  }
  \\],
  174: [\\
  function exp (x) {
    return @exp(x);
  }
  \\],
  175: [\\
  function floor (x) {
    return @floor(x);
  }
  \\],
  176: [\\
  function log (x) {
    return @log(x);
  }
  \\],
  177: [\\
  function max () {
    var i, n = arguments.length, v = -Infinity;
    for (i = 0; i < n; i++) {
      var cur = @ToNumber(arguments[i])
      if (@SameValue(cur, NaN)) return NaN;
      if (v < cur) v = cur;
      if (@SameValue(v, -0) && @SameValue(cur, +0)) v = +0;
    }
    return v;
  }
  \\],
  178: [\\
  function min () {
    var i, n = arguments.length, v = Infinity;
    for (i = 0; i < n; i++) {
      var cur = @ToNumber(arguments[i])
      if (@SameValue(cur, NaN)) return NaN;
      if (v > cur) v = cur;
      if (@SameValue(v, +0) && @SameValue(cur, -0)) v = -0;
    }
    return v;
  }
  \\],
  179: [\\
  function pow (x, y) {
    return @pow(x, y);
  }
  \\],
  180: [\\
  function random () {
    return @NumTop;
  }
  \\],
  181: [\\
  function round (x) {
    return @round(x);
  }
  \\],
  182: [\\
  function sin (x) {
    return @sin(x);
  }
  \\],
  183: [\\
  function sqrt (x) {
    return @sqrt(x);
  }
  \\],
  184: [\\
  function tan (x) {
    return @tan(x);
  }
  \\],
  185: [\\
  function () {
  }
  \\],
  186: [\\
  function () {
  }
  \\]
}
