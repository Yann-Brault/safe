
var c
var i
var l
var quitchars
{
  <>temp<>1 = "q"
  <>temp<>2 = "Q"
  <>Global<>ignore1 = [<>temp<>1, <>temp<>2, ]
  quitchars = <>Global<>ignore1
}
charloop : <>break<>3 : {
  {
    <>obj<>4 = <>Global<>toObject(getc)
    <>arguments<>5 = []
    <>fun<>6 = <>Global<>getBase(getc)
    <>new1<>7 = <>obj<>4(<>fun<>6, <>arguments<>5)
    c = <>new1<>7
  }
  while(<>new1<>7)
  {
    <>continue<>8 : <>break<>9 : {
      {
        i = 0
        <>Global<>ignore3 = 0
        <>y<>10 = i
        <>obj<>11 = <>Global<>toObject(quitchars)
      }
      while(<>y<>10 < <>obj<>11["length"])
      {
        <>continue<>12 : {
          <>y<>13 = c
          <>obj<>14 = <>Global<>toObject(quitchars)
          if(<>y<>13 == <>obj<>14[i])
            break charloop
        }
        {
          <>old<>15 = i
          <>new<>16 = <>Global<>toNumber(<>old<>15)
          i = <>new<>16 + 1
          <>Global<>ignore5 = <>new<>16
          <>y<>10 = i
          <>obj<>11 = <>Global<>toObject(quitchars)
        }
      }
    }
    {
      <>obj<>4 = <>Global<>toObject(getc)
      <>arguments<>5 = []
      <>fun<>6 = <>Global<>getBase(getc)
      <>new1<>7 = <>obj<>4(<>fun<>6, <>arguments<>5)
      c = <>new1<>7
    }
  }
}

